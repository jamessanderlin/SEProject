/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

import java.awt.Color;
import javax.swing.*;
import java.util.*;
import java.awt.Point;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import javax.swing.event.ListSelectionEvent;
import javax.swing.table.AbstractTableModel;
import javax.swing.table.TableModel;

/**
 * UserInterface is the main class for handling user input.
 * 
 * @author Mudrekh Goderya, James Sanderlin
 */
public class UserInterface extends javax.swing.JFrame { 
    
    //Constant ints for easy of identifying arguments;
    public static final int RESIDENTIAL = 0;
    public static final int COMMERCIAL = 1;
    
    /**
     * Creates new form UserInterfacePrototype
     */
    public UserInterface() {        
        initComponents();
        
        //Window listener to force saving on exit.
        addWindowListener(new WindowAdapter() {
            public void windowClosing(WindowEvent e) {
                    Controller.getInstance().save();
                    System.exit(0);
                }
        });
        
        accountTable.getSelectionModel().addListSelectionListener(
        new javax.swing.event.ListSelectionListener() 
        {
            public void valueChanged(ListSelectionEvent evt) 
            {
                showInAccountPanel(getSelectedAccount());
            }
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        accountPopup = new javax.swing.JPopupMenu();
        deleteAccountPopup = new javax.swing.JMenuItem();
        jSeparator2 = new javax.swing.JPopupMenu.Separator();
        addMeterToAccount = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        viewPayments = new javax.swing.JMenuItem();
        quickAddPayment = new javax.swing.JMenuItem();
        jSeparator4 = new javax.swing.JPopupMenu.Separator();
        generateBill = new javax.swing.JMenuItem();
        jSeparator6 = new javax.swing.JPopupMenu.Separator();
        manualBalanceEdit = new javax.swing.JMenuItem();
        accountButtonGroup = new javax.swing.ButtonGroup();
        addMeterPanel = new javax.swing.JPanel();
        meterIDLabel = new javax.swing.JLabel();
        meterTypeLabel = new javax.swing.JLabel();
        meterRateLabel = new javax.swing.JLabel();
        meterAddLine1Label = new javax.swing.JLabel();
        meterAddLine2Label = new javax.swing.JLabel();
        meterCityLabel = new javax.swing.JLabel();
        meterStateLabel = new javax.swing.JLabel();
        meterZipLabel = new javax.swing.JLabel();
        meterIDField = new javax.swing.JTextField();
        meterRateField = new javax.swing.JTextField();
        meterAddLine1Field = new javax.swing.JTextField();
        meterAddLine2Field = new javax.swing.JTextField();
        meterCityField = new javax.swing.JTextField();
        meterStateField = new javax.swing.JTextField();
        meterZipField = new javax.swing.JTextField();
        meterTypeComboBox = new javax.swing.JComboBox();
        optionalLabel = new javax.swing.JLabel();
        meterNote1 = new javax.swing.JLabel();
        meterNote2 = new javax.swing.JLabel();
        meterRatekWh = new javax.swing.JLabel();
        meterNote3 = new javax.swing.JLabel();
        meterPopup = new javax.swing.JPopupMenu();
        viewMeter = new javax.swing.JMenuItem();
        deleteMeter = new javax.swing.JMenuItem();
        jSeparator3 = new javax.swing.JPopupMenu.Separator();
        quickAddMeterReading = new javax.swing.JMenuItem();
        quickAddTax = new javax.swing.JMenuItem();
        viewMeterPanel = new javax.swing.JPanel();
        viewMeterTopLeftPanel = new javax.swing.JPanel();
        viewMeterIDLabel = new javax.swing.JLabel();
        viewMeterTypeLabel = new javax.swing.JLabel();
        viewMeterRateLabel = new javax.swing.JLabel();
        viewMeterIDField = new javax.swing.JTextField();
        viewMeterRateField = new javax.swing.JTextField();
        viewMeterComboBox = new javax.swing.JComboBox();
        viewMeterNote1 = new javax.swing.JLabel();
        viewMeterNote2 = new javax.swing.JLabel();
        viewMeterNote3 = new javax.swing.JLabel();
        viewMeterkWhLabel = new javax.swing.JLabel();
        viewMeterTopRightPanel = new javax.swing.JPanel();
        viewMeterAdd1Label = new javax.swing.JLabel();
        viewMeterAdd2Label = new javax.swing.JLabel();
        viewMeterCityLabel = new javax.swing.JLabel();
        viewMeterStateLabel = new javax.swing.JLabel();
        viewMeterZipLabel = new javax.swing.JLabel();
        viewMeterAdd1Field = new javax.swing.JTextField();
        viewMeterAdd2Field = new javax.swing.JTextField();
        viewMeterCityField = new javax.swing.JTextField();
        viewMeterStateField = new javax.swing.JTextField();
        viewMeterZipField = new javax.swing.JTextField();
        viewMeterReadingTable = new javax.swing.JScrollPane();
        meterReadingTable = new javax.swing.JTable();
        viewMeterPanelOptionNote = new javax.swing.JLabel();
        addMeterReadingButton = new javax.swing.JButton();
        deleteMeterReadingButton = new javax.swing.JButton();
        viewMeterTaxTable = new javax.swing.JScrollPane();
        taxTable = new javax.swing.JTable();
        addTaxButton = new javax.swing.JButton();
        deleteTaxButton = new javax.swing.JButton();
        addMeterReadingPanel = new javax.swing.JPanel();
        addMeterReadingLabel = new javax.swing.JLabel();
        addMeterDateLabel = new javax.swing.JLabel();
        addMeterReadingField = new javax.swing.JTextField();
        addMeterReadingkWh = new javax.swing.JLabel();
        addMeterReadingDateField = new javax.swing.JTextField();
        addMeterReadingTimeLabel = new javax.swing.JLabel();
        addMeterReadingAMPMComboBox = new javax.swing.JComboBox();
        addMeterReadingTimeField = new javax.swing.JTextField();
        addMeterReadingTimeZoneLabel = new javax.swing.JLabel();
        addMeterReadingTimeZoneField = new javax.swing.JTextField();
        addMeterReadingTimeZoneExample = new javax.swing.JLabel();
        addMeterReadingNote = new javax.swing.JLabel();
        meterReadingPopup = new javax.swing.JPopupMenu();
        deleteMeterReading = new javax.swing.JMenuItem();
        addTaxPanel = new javax.swing.JPanel();
        addTaxNameLabel = new javax.swing.JLabel();
        addTaxRateLabel = new javax.swing.JLabel();
        addTaxNote1 = new javax.swing.JLabel();
        addTaxNameField = new javax.swing.JTextField();
        addTaxRateField = new javax.swing.JTextField();
        addTaxNote2 = new javax.swing.JLabel();
        addTaxNote3 = new javax.swing.JLabel();
        addTaxNote4 = new javax.swing.JLabel();
        taxPopup = new javax.swing.JPopupMenu();
        deleteTax = new javax.swing.JMenuItem();
        viewPaymentsPanel = new javax.swing.JPanel();
        viewPaymentsScrollPane = new javax.swing.JScrollPane();
        paymentTable = new javax.swing.JTable();
        viewPaymentsDeleteButton = new javax.swing.JButton();
        viewPaymentsAddButton = new javax.swing.JButton();
        addPaymentPanel = new javax.swing.JPanel();
        addPaymentDateLabel = new javax.swing.JLabel();
        addPaymentDateField = new javax.swing.JTextField();
        addPaymentTimeField = new javax.swing.JTextField();
        addPaymentTimeLabel = new javax.swing.JLabel();
        addPaymentAMPMComboBox = new javax.swing.JComboBox();
        addPaymentTimeZoneLabel = new javax.swing.JLabel();
        addPaymentTimeZoneField = new javax.swing.JTextField();
        addPaymentTimeZoneExample = new javax.swing.JLabel();
        addPaymentPaidAmountLabel = new javax.swing.JLabel();
        addPaymentTypeField = new javax.swing.JLabel();
        addPaymentPaidAmountField = new javax.swing.JTextField();
        addPaymentTypeComboBox = new javax.swing.JComboBox();
        addPaymentNote1 = new javax.swing.JLabel();
        addPaymentNote3 = new javax.swing.JLabel();
        addPaymentUSDLabel = new javax.swing.JLabel();
        addPaymentNote = new javax.swing.JLabel();
        paymentPopup = new javax.swing.JPopupMenu();
        deletePayment = new javax.swing.JMenuItem();
        generateBillDatePanel = new javax.swing.JPanel();
        generateBillStartDateLabel = new javax.swing.JLabel();
        generateBillStartDateField = new javax.swing.JTextField();
        generateBillEndDateLabel = new javax.swing.JLabel();
        generateBillEndDateField = new javax.swing.JTextField();
        generateBillNote = new javax.swing.JLabel();
        editBalancePanel = new javax.swing.JPanel();
        editBalanceOldLabel = new javax.swing.JLabel();
        editBalanceOldField = new javax.swing.JTextField();
        editBalanceNewLabel = new javax.swing.JLabel();
        editBalanceNewField = new javax.swing.JTextField();
        editBalanceNote1 = new javax.swing.JLabel();
        editBalanceFieldNote2 = new javax.swing.JLabel();
        editBalanceUSDLabel = new javax.swing.JLabel();
        editBalanceUSDLabel1 = new javax.swing.JLabel();
        mainSplitPane = new javax.swing.JSplitPane();
        rightSplitPane = new javax.swing.JSplitPane();
        meterViewSrollPane = new javax.swing.JScrollPane();
        meterViewTable = new javax.swing.JTable();
        accountPanel = new javax.swing.JPanel();
        accountInfoPanel = new javax.swing.JPanel();
        firstName = new javax.swing.JLabel();
        lastName = new javax.swing.JLabel();
        accountID = new javax.swing.JLabel();
        addressLine1 = new javax.swing.JLabel();
        addressLine2 = new javax.swing.JLabel();
        city = new javax.swing.JLabel();
        state = new javax.swing.JLabel();
        zip = new javax.swing.JLabel();
        firstNameField = new javax.swing.JTextField();
        lastNameField = new javax.swing.JTextField();
        accountIDField = new javax.swing.JTextField();
        addLine1Field = new javax.swing.JTextField();
        addLine2Field = new javax.swing.JTextField();
        cityField = new javax.swing.JTextField();
        stateField = new javax.swing.JTextField();
        zipField = new javax.swing.JTextField();
        compName = new javax.swing.JLabel();
        compNameField = new javax.swing.JTextField();
        buttonPanel = new javax.swing.JPanel();
        accSave = new javax.swing.JButton();
        accCancel = new javax.swing.JButton();
        accCreate = new javax.swing.JButton();
        resAccButton = new javax.swing.JRadioButton();
        comAccButton = new javax.swing.JRadioButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        accountScrollPane = new javax.swing.JScrollPane();
        accountTable = new javax.swing.JTable();
        menuBar = new javax.swing.JMenuBar();
        menuFile = new javax.swing.JMenu();
        save = new javax.swing.JMenuItem();
        jSeparator5 = new javax.swing.JPopupMenu.Separator();
        gernerateAllBills = new javax.swing.JMenuItem();
        menuEdit = new javax.swing.JMenu();
        deleteAccount = new javax.swing.JMenuItem();

        deleteAccountPopup.setText("Delete Account");
        deleteAccountPopup.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteAccountPopupActionPerformed(evt);
            }
        });
        accountPopup.add(deleteAccountPopup);
        accountPopup.add(jSeparator2);

        addMeterToAccount.setText("Add Meter To Account");
        addMeterToAccount.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addMeterToAccountActionPerformed(evt);
            }
        });
        accountPopup.add(addMeterToAccount);
        accountPopup.add(jSeparator1);

        viewPayments.setText("View Payments");
        viewPayments.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewPaymentsActionPerformed(evt);
            }
        });
        accountPopup.add(viewPayments);

        quickAddPayment.setText("Quick Add Payment");
        quickAddPayment.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                quickAddPaymentActionPerformed(evt);
            }
        });
        accountPopup.add(quickAddPayment);
        accountPopup.add(jSeparator4);

        generateBill.setText("Generate Bill for Account");
        generateBill.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                generateBillActionPerformed(evt);
            }
        });
        accountPopup.add(generateBill);
        accountPopup.add(jSeparator6);

        manualBalanceEdit.setText("Edit Balance Manually");
        manualBalanceEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                manualBalanceEditActionPerformed(evt);
            }
        });
        accountPopup.add(manualBalanceEdit);

        meterIDLabel.setText("Meter ID");

        meterTypeLabel.setText("Type");

        meterRateLabel.setText("Rate");

        meterAddLine1Label.setText("Address Line 1*");

        meterAddLine2Label.setText("Address Line 2*");

        meterCityLabel.setText("City*");

        meterStateLabel.setText("State*");

        meterZipLabel.setText("Zip*");

        meterTypeComboBox.setModel( new javax.swing.DefaultComboBoxModel(Meter.getTypes()));

        optionalLabel.setText("* Indicates an optional field");

        meterNote1.setText("ID must be between 1 and 2147483647 ");

        meterNote2.setText("Rate must be greater than or equal to 0.0");

        meterRatekWh.setText("kWh");

        meterNote3.setText("Account cannont have duplicate Meter IDs");

        javax.swing.GroupLayout addMeterPanelLayout = new javax.swing.GroupLayout(addMeterPanel);
        addMeterPanel.setLayout(addMeterPanelLayout);
        addMeterPanelLayout.setHorizontalGroup(
            addMeterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(addMeterPanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(addMeterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(addMeterPanelLayout.createSequentialGroup()
                        .addGroup(addMeterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(meterZipLabel, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(meterStateLabel, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(meterCityLabel, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(meterAddLine2Label, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(meterAddLine1Label, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(meterRateLabel, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(meterTypeLabel, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(meterIDLabel, javax.swing.GroupLayout.Alignment.TRAILING))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(addMeterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(addMeterPanelLayout.createSequentialGroup()
                                .addGroup(addMeterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(meterRateField, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(meterTypeComboBox, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(meterRatekWh))
                            .addGroup(addMeterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(meterCityField, javax.swing.GroupLayout.DEFAULT_SIZE, 142, Short.MAX_VALUE)
                                .addComponent(meterIDField, javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(meterAddLine2Field)
                                .addComponent(meterAddLine1Field))
                            .addGroup(addMeterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(meterZipField, javax.swing.GroupLayout.DEFAULT_SIZE, 66, Short.MAX_VALUE)
                                .addComponent(meterStateField))))
                    .addComponent(meterNote1)
                    .addComponent(optionalLabel)
                    .addComponent(meterNote2)
                    .addComponent(meterNote3)))
        );
        addMeterPanelLayout.setVerticalGroup(
            addMeterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(addMeterPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(addMeterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(meterIDLabel)
                    .addComponent(meterIDField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(addMeterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(meterTypeLabel)
                    .addComponent(meterTypeComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(addMeterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(meterRateLabel)
                    .addGroup(addMeterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(meterRateField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(meterRatekWh)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(addMeterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(meterAddLine1Label)
                    .addComponent(meterAddLine1Field, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(addMeterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(meterAddLine2Label)
                    .addComponent(meterAddLine2Field, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(addMeterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(meterCityLabel)
                    .addComponent(meterCityField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(addMeterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(meterStateLabel)
                    .addComponent(meterStateField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(addMeterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(meterZipLabel)
                    .addComponent(meterZipField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(optionalLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(meterNote1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(meterNote2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(meterNote3)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        viewMeter.setText("View Meter");
        viewMeter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewMeterActionPerformed(evt);
            }
        });
        meterPopup.add(viewMeter);

        deleteMeter.setText("Delete Meter");
        deleteMeter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteMeterActionPerformed(evt);
            }
        });
        meterPopup.add(deleteMeter);
        meterPopup.add(jSeparator3);

        quickAddMeterReading.setText("Quick Add Meter Reading");
        quickAddMeterReading.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                quickAddMeterReadingActionPerformed(evt);
            }
        });
        meterPopup.add(quickAddMeterReading);

        quickAddTax.setText("Quick Add Tax");
        quickAddTax.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                quickAddTaxActionPerformed(evt);
            }
        });
        meterPopup.add(quickAddTax);

        viewMeterIDLabel.setText("Meter ID");

        viewMeterTypeLabel.setText("Meter Type");

        viewMeterRateLabel.setText("Meter Rate");

        viewMeterComboBox.setModel(new DefaultComboBoxModel(Meter.getTypes()));

        viewMeterNote1.setText("New ID must be between 1 and 2147483647");

        viewMeterNote2.setText("Rate must be greater than or equal to 0.0");

        viewMeterNote3.setText("Account cannot have duplicate Meter IDs");

        viewMeterkWhLabel.setText("kWh");

        javax.swing.GroupLayout viewMeterTopLeftPanelLayout = new javax.swing.GroupLayout(viewMeterTopLeftPanel);
        viewMeterTopLeftPanel.setLayout(viewMeterTopLeftPanelLayout);
        viewMeterTopLeftPanelLayout.setHorizontalGroup(
            viewMeterTopLeftPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(viewMeterTopLeftPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(viewMeterTopLeftPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(viewMeterNote1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 279, Short.MAX_VALUE)
                    .addGroup(viewMeterTopLeftPanelLayout.createSequentialGroup()
                        .addGroup(viewMeterTopLeftPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(viewMeterTopLeftPanelLayout.createSequentialGroup()
                                .addGroup(viewMeterTopLeftPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(viewMeterRateLabel, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(viewMeterTypeLabel, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(viewMeterIDLabel, javax.swing.GroupLayout.Alignment.TRAILING))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(viewMeterTopLeftPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(viewMeterIDField, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(viewMeterComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(viewMeterTopLeftPanelLayout.createSequentialGroup()
                                        .addComponent(viewMeterRateField, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(viewMeterkWhLabel))))
                            .addComponent(viewMeterNote3)
                            .addComponent(viewMeterNote2))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        viewMeterTopLeftPanelLayout.setVerticalGroup(
            viewMeterTopLeftPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, viewMeterTopLeftPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(viewMeterTopLeftPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(viewMeterIDLabel)
                    .addComponent(viewMeterIDField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(viewMeterTopLeftPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(viewMeterTypeLabel)
                    .addComponent(viewMeterComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(viewMeterTopLeftPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(viewMeterRateLabel)
                    .addComponent(viewMeterRateField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(viewMeterkWhLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(viewMeterNote1, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(viewMeterNote3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(viewMeterNote2)
                .addContainerGap(19, Short.MAX_VALUE))
        );

        viewMeterAdd1Label.setText("Address Line 1");

        viewMeterAdd2Label.setText("Address Line 2");

        viewMeterCityLabel.setText("City");

        viewMeterStateLabel.setText("State");

        viewMeterZipLabel.setText("Zip");

        javax.swing.GroupLayout viewMeterTopRightPanelLayout = new javax.swing.GroupLayout(viewMeterTopRightPanel);
        viewMeterTopRightPanel.setLayout(viewMeterTopRightPanelLayout);
        viewMeterTopRightPanelLayout.setHorizontalGroup(
            viewMeterTopRightPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(viewMeterTopRightPanelLayout.createSequentialGroup()
                .addGap(8, 8, 8)
                .addGroup(viewMeterTopRightPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(viewMeterAdd1Label, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(viewMeterAdd2Label, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(viewMeterCityLabel, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(viewMeterStateLabel, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(viewMeterZipLabel, javax.swing.GroupLayout.Alignment.TRAILING))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(viewMeterTopRightPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(viewMeterTopRightPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(viewMeterAdd1Field, javax.swing.GroupLayout.DEFAULT_SIZE, 150, Short.MAX_VALUE)
                        .addComponent(viewMeterAdd2Field)
                        .addComponent(viewMeterCityField, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(viewMeterStateField, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(viewMeterZipField, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        viewMeterTopRightPanelLayout.setVerticalGroup(
            viewMeterTopRightPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(viewMeterTopRightPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(viewMeterTopRightPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(viewMeterAdd1Label)
                    .addComponent(viewMeterAdd1Field, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(viewMeterTopRightPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(viewMeterAdd2Label)
                    .addComponent(viewMeterAdd2Field, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(viewMeterTopRightPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(viewMeterCityLabel)
                    .addComponent(viewMeterCityField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(viewMeterTopRightPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(viewMeterStateLabel)
                    .addComponent(viewMeterStateField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(viewMeterTopRightPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(viewMeterZipLabel)
                    .addComponent(viewMeterZipField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        viewMeterReadingTable.setBorder(javax.swing.BorderFactory.createTitledBorder("Meter Readings"));

        meterReadingTable.setAutoCreateRowSorter(true);
        meterReadingTable.setModel(new MeterReadingViewTableModel());
        meterReadingTable.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        meterReadingTable.setDefaultRenderer(Object.class, new LeftCellRenderer());
        meterReadingTable.setDefaultRenderer(Date.class, new DateCellRenderer());
        meterReadingTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                meterReadingTableMouseReleased(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                meterReadingTableMousePressed(evt);
            }
        });
        viewMeterReadingTable.setViewportView(meterReadingTable);

        viewMeterPanelOptionNote.setText("*Note: Cancel only ignores changes to meter fields. Other modifications are kept.");

        addMeterReadingButton.setText("Add Meter Reading");
        addMeterReadingButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addMeterReadingButtonActionPerformed(evt);
            }
        });

        deleteMeterReadingButton.setText("Delete Meter Reading");
        deleteMeterReadingButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteMeterReadingButtonActionPerformed(evt);
            }
        });

        viewMeterTaxTable.setBorder(javax.swing.BorderFactory.createTitledBorder("Taxes"));

        taxTable.setAutoCreateRowSorter(true);
        taxTable.setModel(new TaxViewTableModel());
        taxTable.setDefaultRenderer(Object.class, new LeftCellRenderer());
        taxTable.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        taxTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                taxTableMouseReleased(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                taxTableMousePressed(evt);
            }
        });
        viewMeterTaxTable.setViewportView(taxTable);

        addTaxButton.setText("Add Tax");
        addTaxButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addTaxButtonActionPerformed(evt);
            }
        });

        deleteTaxButton.setText("Delete Tax");
        deleteTaxButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteTaxButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout viewMeterPanelLayout = new javax.swing.GroupLayout(viewMeterPanel);
        viewMeterPanel.setLayout(viewMeterPanelLayout);
        viewMeterPanelLayout.setHorizontalGroup(
            viewMeterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(viewMeterPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(viewMeterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(viewMeterPanelLayout.createSequentialGroup()
                        .addComponent(viewMeterTopLeftPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(viewMeterTopRightPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(viewMeterPanelLayout.createSequentialGroup()
                        .addComponent(viewMeterReadingTable, javax.swing.GroupLayout.PREFERRED_SIZE, 303, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(viewMeterTaxTable, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                    .addGroup(viewMeterPanelLayout.createSequentialGroup()
                        .addGroup(viewMeterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(viewMeterPanelOptionNote)
                            .addGroup(viewMeterPanelLayout.createSequentialGroup()
                                .addGap(10, 10, 10)
                                .addComponent(addMeterReadingButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(deleteMeterReadingButton)
                                .addGap(48, 48, 48)
                                .addComponent(addTaxButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(deleteTaxButton)))
                        .addGap(0, 29, Short.MAX_VALUE)))
                .addContainerGap())
        );
        viewMeterPanelLayout.setVerticalGroup(
            viewMeterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(viewMeterPanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(viewMeterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(viewMeterTopRightPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(viewMeterTopLeftPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(viewMeterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(viewMeterTaxTable, javax.swing.GroupLayout.DEFAULT_SIZE, 187, Short.MAX_VALUE)
                    .addComponent(viewMeterReadingTable, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(viewMeterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(addMeterReadingButton)
                    .addComponent(deleteMeterReadingButton)
                    .addComponent(addTaxButton)
                    .addComponent(deleteTaxButton))
                .addGap(18, 18, 18)
                .addComponent(viewMeterPanelOptionNote)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        addMeterReadingLabel.setText("Reading*");

        addMeterDateLabel.setText("Date");

        addMeterReadingkWh.setText("kWh");

        addMeterReadingDateField.setText("mm/dd/yy");

        addMeterReadingTimeLabel.setText("Time");

        addMeterReadingAMPMComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "AM", "PM" }));

        addMeterReadingTimeField.setText("hh:mm");

        addMeterReadingTimeZoneLabel.setText("Time zone");

        addMeterReadingTimeZoneExample.setText("(i.e CST)");

        addMeterReadingNote.setText("*Reading must be betwen 1-2147483647");

        javax.swing.GroupLayout addMeterReadingPanelLayout = new javax.swing.GroupLayout(addMeterReadingPanel);
        addMeterReadingPanel.setLayout(addMeterReadingPanelLayout);
        addMeterReadingPanelLayout.setHorizontalGroup(
            addMeterReadingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(addMeterReadingPanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(addMeterReadingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(addMeterReadingTimeZoneLabel)
                    .addComponent(addMeterReadingTimeLabel)
                    .addComponent(addMeterDateLabel)
                    .addComponent(addMeterReadingLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(addMeterReadingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(addMeterReadingPanelLayout.createSequentialGroup()
                        .addComponent(addMeterReadingField, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(addMeterReadingkWh))
                    .addComponent(addMeterReadingDateField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(addMeterReadingPanelLayout.createSequentialGroup()
                        .addComponent(addMeterReadingTimeField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(addMeterReadingAMPMComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(addMeterReadingPanelLayout.createSequentialGroup()
                        .addComponent(addMeterReadingTimeZoneField, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(addMeterReadingTimeZoneExample)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, addMeterReadingPanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(addMeterReadingNote)
                .addContainerGap())
        );
        addMeterReadingPanelLayout.setVerticalGroup(
            addMeterReadingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(addMeterReadingPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(addMeterReadingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(addMeterReadingLabel)
                    .addComponent(addMeterReadingField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(addMeterReadingkWh))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(addMeterReadingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(addMeterDateLabel)
                    .addComponent(addMeterReadingDateField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(addMeterReadingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(addMeterReadingTimeLabel)
                    .addComponent(addMeterReadingAMPMComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(addMeterReadingTimeField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(addMeterReadingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(addMeterReadingTimeZoneLabel)
                    .addComponent(addMeterReadingTimeZoneField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(addMeterReadingTimeZoneExample))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(addMeterReadingNote)
                .addContainerGap())
        );

        deleteMeterReading.setText("Delete Meter Reading");
        deleteMeterReading.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteMeterReadingActionPerformed(evt);
            }
        });
        meterReadingPopup.add(deleteMeterReading);

        addTaxNameLabel.setText("Tax Name");

        addTaxRateLabel.setText("Tax Rate");

        addTaxNote1.setText("*Rate should be greater than or");

        addTaxNote2.setText("eaual to 0.0");

        addTaxNote3.setText("Note: Tax rates are in decimals");

        addTaxNote4.setText("8% tax should be entered as .08");

        javax.swing.GroupLayout addTaxPanelLayout = new javax.swing.GroupLayout(addTaxPanel);
        addTaxPanel.setLayout(addTaxPanelLayout);
        addTaxPanelLayout.setHorizontalGroup(
            addTaxPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(addTaxPanelLayout.createSequentialGroup()
                .addGroup(addTaxPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(addTaxPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addGroup(addTaxPanelLayout.createSequentialGroup()
                            .addContainerGap()
                            .addGroup(addTaxPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(addTaxRateLabel, javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(addTaxNameLabel, javax.swing.GroupLayout.Alignment.TRAILING))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addGroup(addTaxPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(addTaxNameField)
                                .addComponent(addTaxRateField)))
                        .addGroup(addTaxPanelLayout.createSequentialGroup()
                            .addGap(12, 12, 12)
                            .addGroup(addTaxPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(addTaxNote1)
                                .addGroup(addTaxPanelLayout.createSequentialGroup()
                                    .addGap(10, 10, 10)
                                    .addComponent(addTaxNote2)))))
                    .addGroup(addTaxPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(addTaxPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(addTaxNote3)
                            .addGroup(addTaxPanelLayout.createSequentialGroup()
                                .addGap(10, 10, 10)
                                .addComponent(addTaxNote4)))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        addTaxPanelLayout.setVerticalGroup(
            addTaxPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(addTaxPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(addTaxPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(addTaxNameLabel)
                    .addComponent(addTaxNameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(addTaxPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(addTaxRateLabel)
                    .addComponent(addTaxRateField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(addTaxNote1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(addTaxNote2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(addTaxNote3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(addTaxNote4))
        );

        deleteTax.setText("Delete Tax");
        deleteTax.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteTaxActionPerformed(evt);
            }
        });
        taxPopup.add(deleteTax);

        paymentTable.setAutoCreateRowSorter(true);
        paymentTable.setModel(new PaymentViewTableModel());
        paymentTable.setDefaultRenderer(Object.class, new LeftCellRenderer());
        paymentTable.setDefaultRenderer(Date.class, new DateCellRenderer());
        paymentTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                paymentTableMouseReleased(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                paymentTableMousePressed(evt);
            }
        });
        viewPaymentsScrollPane.setViewportView(paymentTable);

        viewPaymentsDeleteButton.setText("Delete Payment");
        viewPaymentsDeleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewPaymentsDeleteButtonActionPerformed(evt);
            }
        });

        viewPaymentsAddButton.setText("Add Payment");
        viewPaymentsAddButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewPaymentsAddButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout viewPaymentsPanelLayout = new javax.swing.GroupLayout(viewPaymentsPanel);
        viewPaymentsPanel.setLayout(viewPaymentsPanelLayout);
        viewPaymentsPanelLayout.setHorizontalGroup(
            viewPaymentsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(viewPaymentsPanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(viewPaymentsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(viewPaymentsScrollPane, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 330, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, viewPaymentsPanelLayout.createSequentialGroup()
                        .addComponent(viewPaymentsAddButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(viewPaymentsDeleteButton)))
                .addContainerGap())
        );
        viewPaymentsPanelLayout.setVerticalGroup(
            viewPaymentsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(viewPaymentsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(viewPaymentsScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 225, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(viewPaymentsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(viewPaymentsDeleteButton)
                    .addComponent(viewPaymentsAddButton))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        addPaymentDateLabel.setText("Date");

        addPaymentDateField.setText("mm/dd/yy");

        addPaymentTimeField.setText("hh:mm");

        addPaymentTimeLabel.setText("Time");

        addPaymentAMPMComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "AM", "PM" }));

        addPaymentTimeZoneLabel.setText("Time zone");

        addPaymentTimeZoneExample.setText("(i.e CST)");

        addPaymentPaidAmountLabel.setText("Paid Amount");

        addPaymentTypeField.setText("Payment Time");

        addPaymentTypeComboBox.setModel(new DefaultComboBoxModel(Payment.getPossiblePaymentTypes()));

        addPaymentNote1.setText("*Paid Amount must be greater than or");

        addPaymentNote3.setText("Note: Payments can have fractional cents");

        addPaymentUSDLabel.setText("USD");

        addPaymentNote.setText("equal to 0.0");

        javax.swing.GroupLayout addPaymentPanelLayout = new javax.swing.GroupLayout(addPaymentPanel);
        addPaymentPanel.setLayout(addPaymentPanelLayout);
        addPaymentPanelLayout.setHorizontalGroup(
            addPaymentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(addPaymentPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(addPaymentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(addPaymentPanelLayout.createSequentialGroup()
                        .addGroup(addPaymentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(addPaymentTypeField, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(addPaymentPaidAmountLabel, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(addPaymentTimeZoneLabel, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(addPaymentTimeLabel, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(addPaymentDateLabel, javax.swing.GroupLayout.Alignment.TRAILING))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(addPaymentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(addPaymentPanelLayout.createSequentialGroup()
                                .addGroup(addPaymentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(addPaymentPaidAmountField, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(addPaymentTypeComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(addPaymentPanelLayout.createSequentialGroup()
                                        .addComponent(addPaymentTimeField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(addPaymentAMPMComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(addPaymentDateField, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(addPaymentUSDLabel))
                            .addGroup(addPaymentPanelLayout.createSequentialGroup()
                                .addComponent(addPaymentTimeZoneField, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(addPaymentTimeZoneExample)))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(addPaymentPanelLayout.createSequentialGroup()
                        .addGroup(addPaymentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(addPaymentNote1)
                            .addComponent(addPaymentNote3))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(addPaymentPanelLayout.createSequentialGroup()
                        .addComponent(addPaymentNote)
                        .addGap(0, 0, Short.MAX_VALUE))))
        );
        addPaymentPanelLayout.setVerticalGroup(
            addPaymentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(addPaymentPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(addPaymentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(addPaymentDateLabel)
                    .addComponent(addPaymentDateField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(addPaymentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(addPaymentTimeLabel)
                    .addComponent(addPaymentAMPMComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(addPaymentTimeField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(addPaymentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(addPaymentTimeZoneLabel)
                    .addComponent(addPaymentTimeZoneField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(addPaymentTimeZoneExample))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(addPaymentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(addPaymentPaidAmountLabel)
                    .addComponent(addPaymentPaidAmountField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(addPaymentUSDLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(addPaymentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(addPaymentTypeField)
                    .addComponent(addPaymentTypeComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(addPaymentNote1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(addPaymentNote)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(addPaymentNote3)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        deletePayment.setText("Delete Payment");
        deletePayment.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deletePaymentActionPerformed(evt);
            }
        });
        paymentPopup.add(deletePayment);

        generateBillStartDateLabel.setText("Start Date");

        generateBillStartDateField.setText("mm/dd/yy");

        generateBillEndDateLabel.setText("End Date");

        generateBillEndDateField.setText("mm/dd/yy");

        generateBillNote.setText("*Start Date should come before End Date");

        javax.swing.GroupLayout generateBillDatePanelLayout = new javax.swing.GroupLayout(generateBillDatePanel);
        generateBillDatePanel.setLayout(generateBillDatePanelLayout);
        generateBillDatePanelLayout.setHorizontalGroup(
            generateBillDatePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(generateBillDatePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(generateBillDatePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(generateBillNote)
                    .addGroup(generateBillDatePanelLayout.createSequentialGroup()
                        .addComponent(generateBillStartDateLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(generateBillStartDateField, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(generateBillEndDateLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(generateBillEndDateField, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        generateBillDatePanelLayout.setVerticalGroup(
            generateBillDatePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, generateBillDatePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(generateBillDatePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(generateBillStartDateLabel)
                    .addComponent(generateBillStartDateField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(generateBillEndDateLabel)
                    .addComponent(generateBillEndDateField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(generateBillNote))
        );

        editBalanceOldLabel.setText("Old Balance");

        editBalanceOldField.setEditable(false);
        editBalanceOldField.setBackground(new java.awt.Color(204, 204, 204));

        editBalanceNewLabel.setText("New Balance");

        editBalanceNote1.setText("*Positive values indicate customer owes money. ");

        editBalanceFieldNote2.setText("*Negative values indicate customer has credit on account.");

        editBalanceUSDLabel.setText("USD");

        editBalanceUSDLabel1.setText("USD");

        javax.swing.GroupLayout editBalancePanelLayout = new javax.swing.GroupLayout(editBalancePanel);
        editBalancePanel.setLayout(editBalancePanelLayout);
        editBalancePanelLayout.setHorizontalGroup(
            editBalancePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(editBalancePanelLayout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addGroup(editBalancePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(editBalanceNote1)
                    .addComponent(editBalanceFieldNote2)
                    .addGroup(editBalancePanelLayout.createSequentialGroup()
                        .addGroup(editBalancePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(editBalanceNewLabel, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(editBalanceOldLabel, javax.swing.GroupLayout.Alignment.TRAILING))
                        .addGroup(editBalancePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(editBalancePanelLayout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(editBalanceOldField))
                            .addGroup(editBalancePanelLayout.createSequentialGroup()
                                .addGap(5, 5, 5)
                                .addComponent(editBalanceNewField)))
                        .addGap(5, 5, 5)
                        .addGroup(editBalancePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(editBalanceUSDLabel1, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(editBalanceUSDLabel, javax.swing.GroupLayout.Alignment.TRAILING))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        editBalancePanelLayout.setVerticalGroup(
            editBalancePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(editBalancePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(editBalancePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(editBalanceOldLabel)
                    .addComponent(editBalanceOldField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(editBalanceUSDLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(editBalancePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(editBalanceNewLabel)
                    .addComponent(editBalanceNewField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(editBalanceUSDLabel1))
                .addGap(3, 3, 3)
                .addComponent(editBalanceNote1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(editBalanceFieldNote2)
                .addContainerGap())
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Utility Billing Program");

        mainSplitPane.setDividerLocation(500);

        rightSplitPane.setDividerLocation(500);
        rightSplitPane.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);

        meterViewSrollPane.setBorder(javax.swing.BorderFactory.createTitledBorder("Meter Display"));

        meterViewTable.setAutoCreateRowSorter(true);
        meterViewTable.setModel(new MeterViewTableModel());
        meterViewTable.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        meterViewTable.setDefaultRenderer(Object.class, new LeftCellRenderer());
        meterViewTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                meterViewTableMouseReleased(evt);
            }
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                meterViewTableMouseClicked(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                meterViewTableMousePressed(evt);
            }
        });
        meterViewSrollPane.setViewportView(meterViewTable);

        rightSplitPane.setRightComponent(meterViewSrollPane);

        accountPanel.setName(""); // NOI18N

        accountInfoPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Account Information"));
        accountInfoPanel.setName("Residential Account Information"); // NOI18N

        firstName.setText("First Name");

        lastName.setText("Last Name");

        accountID.setText("Account ID");

        addressLine1.setText("Address Line 1");

        addressLine2.setText("Address Line 2");

        city.setText("City");

        state.setText("State");

        zip.setText("Zip");

        compName.setText("Company Name");

        compNameField.setEnabled(false);

        accSave.setText("Save/Edit");
        accSave.setEnabled(false);

        accCancel.setText("Cancel");
        accCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                accCancelActionPerformed(evt);
            }
        });

        accCreate.setText("Create");
        accCreate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                accCreateActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout buttonPanelLayout = new javax.swing.GroupLayout(buttonPanel);
        buttonPanel.setLayout(buttonPanelLayout);
        buttonPanelLayout.setHorizontalGroup(
            buttonPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(buttonPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(accSave, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(accCreate, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(accCancel, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        buttonPanelLayout.setVerticalGroup(
            buttonPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, buttonPanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(buttonPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(accSave)
                    .addComponent(accCancel)
                    .addComponent(accCreate))
                .addContainerGap())
        );

        accountButtonGroup.add(resAccButton);
        resAccButton.setSelected(true);
        resAccButton.setText("Residential Account");
        resAccButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resAccButtonActionPerformed(evt);
            }
        });

        accountButtonGroup.add(comAccButton);
        comAccButton.setText("Commercial Account");
        comAccButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comAccButtonActionPerformed(evt);
            }
        });

        jLabel1.setText("(1 - 2147483647)");

        jLabel2.setText("*Red background indicates invalid entry or conflict");

        javax.swing.GroupLayout accountInfoPanelLayout = new javax.swing.GroupLayout(accountInfoPanel);
        accountInfoPanel.setLayout(accountInfoPanelLayout);
        accountInfoPanelLayout.setHorizontalGroup(
            accountInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(accountInfoPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(accountInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, accountInfoPanelLayout.createSequentialGroup()
                        .addComponent(buttonPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addContainerGap())
                    .addGroup(accountInfoPanelLayout.createSequentialGroup()
                        .addGroup(accountInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(accountInfoPanelLayout.createSequentialGroup()
                                .addGap(10, 10, 10)
                                .addComponent(jLabel2))
                            .addGroup(accountInfoPanelLayout.createSequentialGroup()
                                .addGroup(accountInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(firstName, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(accountID, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(addressLine1, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(addressLine2, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(city, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(state, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(zip, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(accountInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(lastName, javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addComponent(compName, javax.swing.GroupLayout.Alignment.TRAILING)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(accountInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(comAccButton)
                                    .addGroup(accountInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(firstNameField)
                                        .addComponent(lastNameField)
                                        .addGroup(accountInfoPanelLayout.createSequentialGroup()
                                            .addComponent(accountIDField, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(jLabel1))
                                        .addComponent(addLine1Field)
                                        .addComponent(addLine2Field)
                                        .addComponent(cityField, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(zipField)
                                        .addComponent(stateField)
                                        .addComponent(compNameField)
                                        .addComponent(resAccButton)))))
                        .addGap(0, 0, Short.MAX_VALUE))))
        );
        accountInfoPanelLayout.setVerticalGroup(
            accountInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(accountInfoPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(accountInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(firstName)
                    .addComponent(firstNameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(accountInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lastName)
                    .addComponent(lastNameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(accountInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(compName)
                    .addComponent(compNameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(accountInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(accountID)
                    .addComponent(accountIDField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(accountInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(addressLine1)
                    .addComponent(addLine1Field, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(accountInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(addressLine2)
                    .addComponent(addLine2Field, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(accountInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(city)
                    .addComponent(cityField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(accountInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(state)
                    .addComponent(stateField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(accountInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(zip)
                    .addComponent(zipField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(resAccButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(comAccButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 11, Short.MAX_VALUE)
                .addComponent(buttonPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(3, 3, 3)
                .addComponent(jLabel2)
                .addContainerGap())
        );

        javax.swing.GroupLayout accountPanelLayout = new javax.swing.GroupLayout(accountPanel);
        accountPanel.setLayout(accountPanelLayout);
        accountPanelLayout.setHorizontalGroup(
            accountPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(accountPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(accountInfoPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 335, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(22, Short.MAX_VALUE))
        );
        accountPanelLayout.setVerticalGroup(
            accountPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(accountPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(accountInfoPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(41, Short.MAX_VALUE))
        );

        rightSplitPane.setLeftComponent(accountPanel);

        mainSplitPane.setRightComponent(rightSplitPane);

        accountScrollPane.setBorder(javax.swing.BorderFactory.createTitledBorder("Account Display"));
        accountScrollPane.setMinimumSize(new java.awt.Dimension(200, 200));

        accountTable.setAutoCreateRowSorter(true);
        accountTable.setModel(new MapTableModel(Controller.getInstance().getAccounts(), "Account ID", "Account Name"));
        accountTable.setDefaultRenderer(Object.class, new LeftCellRenderer());
        accountTable.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        accountTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                accountTableMouseReleased(evt);
            }
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                accountTableMouseClicked(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                accountTableMousePressed(evt);
            }
        });
        accountScrollPane.setViewportView(accountTable);

        mainSplitPane.setLeftComponent(accountScrollPane);

        menuFile.setText("File");

        save.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        save.setText("Save");
        save.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveActionPerformed(evt);
            }
        });
        menuFile.add(save);
        menuFile.add(jSeparator5);

        gernerateAllBills.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_A, java.awt.event.InputEvent.ALT_MASK | java.awt.event.InputEvent.SHIFT_MASK));
        gernerateAllBills.setText("Generate Bill for All Accounts");
        gernerateAllBills.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                gernerateAllBillsActionPerformed(evt);
            }
        });
        menuFile.add(gernerateAllBills);

        menuBar.add(menuFile);

        menuEdit.setText("Edit");

        deleteAccount.setText("Delete Account");
        deleteAccount.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteAccountActionPerformed(evt);
            }
        });
        menuEdit.add(deleteAccount);

        menuBar.add(menuEdit);

        setJMenuBar(menuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(mainSplitPane, javax.swing.GroupLayout.DEFAULT_SIZE, 877, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(mainSplitPane, javax.swing.GroupLayout.DEFAULT_SIZE, 708, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Action to handle force saving the status of the program
     * 
     * @param evt The event passed to this action.
     */
    private void saveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveActionPerformed
        Controller.getInstance().save();
    }//GEN-LAST:event_saveActionPerformed

    /**
     * Action to handle deleting an account from the edit menu
     * 
     * @param evt The event passed to this action.
     */
    private void deleteAccountActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteAccountActionPerformed
        JTextField accountID = new JTextField(12);
        Object[] options = {"DELETE", "CANCEL"};

          JPanel myPanel = new JPanel();
          myPanel.add(new JLabel("Enter Account ID to Delete:"));
          myPanel.add(accountID);

          int result = JOptionPane.showOptionDialog(null, myPanel, 
                   "Delete an account", JOptionPane.DEFAULT_OPTION, JOptionPane.INFORMATION_MESSAGE, null, options, options[0]);
          if (result == 0) 
          {
             int ID = Integer.parseInt(accountID.getText()); 
             confirmAccountDelete(ID);
          }
    }//GEN-LAST:event_deleteAccountActionPerformed
    
    /**
     * Event to detect popup
     * 
     * @param evt The event passed to this action.
     */
    private void accountTableMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_accountTableMousePressed
        doAccountPopup(evt);
        
    }//GEN-LAST:event_accountTableMousePressed

    /**
     * Event to detect popup
     * 
     * @param evt The event passed to this action.
     */
    private void accountTableMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_accountTableMouseReleased
        doAccountPopup(evt);
    }//GEN-LAST:event_accountTableMouseReleased
    
    /**
     * Action called when the user wants to delete an account from the popup menu
     * 
     * @param evt The event passed to this action.
     */
    private void deleteAccountPopupActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteAccountPopupActionPerformed
        int accID = getSelectedAccountID();
        if(confirmAccountDelete(accID)!=null)
            resetAccountInfoPanel();
    }//GEN-LAST:event_deleteAccountPopupActionPerformed

    private void addMeterToAccountActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addMeterToAccountActionPerformed
        openAddMeterPanel();
    }//GEN-LAST:event_addMeterToAccountActionPerformed

    private void accountTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_accountTableMouseClicked
        showInAccountPanel(getSelectedAccount());     
    }//GEN-LAST:event_accountTableMouseClicked

    private void resAccButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resAccButtonActionPerformed
            firstNameField.setText(compNameField.getText());
            lastNameField.setText("");
            compNameField.setText("");
            enableNameFields(RESIDENTIAL);
    }//GEN-LAST:event_resAccButtonActionPerformed

    private void comAccButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comAccButtonActionPerformed
            compNameField.setText(firstNameField.getText() + " " + lastNameField.getText());
            lastNameField.setText("");
            firstNameField.setText("");
            enableNameFields(COMMERCIAL);

    }//GEN-LAST:event_comAccButtonActionPerformed

    private void accCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_accCancelActionPerformed
            resetAccountInfoPanel();
            accountTable.clearSelection();
    }//GEN-LAST:event_accCancelActionPerformed

    private void accCreateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_accCreateActionPerformed
        Account temp = getAccountFromAccountPanel();
        if(temp != null)
        {
            Controller.getInstance().addAccount(temp);
            clearTextInAccountPanel();
            clearFieldColorsInAccountPanel();
            updateJTable(accountTable);
        }
    }//GEN-LAST:event_accCreateActionPerformed

    private void viewMeterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewMeterActionPerformed
        openViewMeterPanel();
    }//GEN-LAST:event_viewMeterActionPerformed

    private void meterViewTableMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_meterViewTableMousePressed
        doMeterPopup(evt);
    }//GEN-LAST:event_meterViewTableMousePressed

    private void meterViewTableMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_meterViewTableMouseReleased
        doMeterPopup(evt);
    }//GEN-LAST:event_meterViewTableMouseReleased

    private void addMeterReadingButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addMeterReadingButtonActionPerformed
        openAddMeterReadingPanel();
    }//GEN-LAST:event_addMeterReadingButtonActionPerformed

    private void deleteMeterReadingActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteMeterReadingActionPerformed
        deleteSelectedMeterReading();
        
    }//GEN-LAST:event_deleteMeterReadingActionPerformed

    private void meterReadingTableMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_meterReadingTableMousePressed
        doMeterReadingPopup(evt);
    }//GEN-LAST:event_meterReadingTableMousePressed

    private void meterReadingTableMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_meterReadingTableMouseReleased
        doMeterReadingPopup(evt);
    }//GEN-LAST:event_meterReadingTableMouseReleased

    private void meterViewTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_meterViewTableMouseClicked
        if(evt.getClickCount() > 1)
        {
            openViewMeterPanel();
        }
    }//GEN-LAST:event_meterViewTableMouseClicked

    private void deleteMeterReadingButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteMeterReadingButtonActionPerformed
        deleteSelectedMeterReading();
    }//GEN-LAST:event_deleteMeterReadingButtonActionPerformed

    private void deleteMeterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteMeterActionPerformed
        confirmMeterDelete();
    }//GEN-LAST:event_deleteMeterActionPerformed

    private void quickAddMeterReadingActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_quickAddMeterReadingActionPerformed
        openAddMeterReadingPanel();
    }//GEN-LAST:event_quickAddMeterReadingActionPerformed

    private void addTaxButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addTaxButtonActionPerformed
        openAddTaxPanel();
    }//GEN-LAST:event_addTaxButtonActionPerformed

    private void quickAddTaxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_quickAddTaxActionPerformed
        openAddTaxPanel();
    }//GEN-LAST:event_quickAddTaxActionPerformed

    private void deleteTaxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteTaxActionPerformed
        deleteSelectedTax();
    }//GEN-LAST:event_deleteTaxActionPerformed

    private void deleteTaxButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteTaxButtonActionPerformed
        deleteSelectedTax();
    }//GEN-LAST:event_deleteTaxButtonActionPerformed

    private void taxTableMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_taxTableMouseReleased
        doTaxPopup(evt);
    }//GEN-LAST:event_taxTableMouseReleased

    private void taxTableMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_taxTableMousePressed
        doTaxPopup(evt);
    }//GEN-LAST:event_taxTableMousePressed

    private void viewPaymentsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewPaymentsActionPerformed
        openViewPaymentPanel();
    }//GEN-LAST:event_viewPaymentsActionPerformed

    private void viewPaymentsAddButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewPaymentsAddButtonActionPerformed
        openAddPaymentPanel();
    }//GEN-LAST:event_viewPaymentsAddButtonActionPerformed

    private void viewPaymentsDeleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewPaymentsDeleteButtonActionPerformed
        deleteSelectedPayment();
    }//GEN-LAST:event_viewPaymentsDeleteButtonActionPerformed

    private void quickAddPaymentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_quickAddPaymentActionPerformed
        openAddPaymentPanel();
    }//GEN-LAST:event_quickAddPaymentActionPerformed

    private void paymentTableMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_paymentTableMousePressed
        doPaymentsPopup(evt);
    }//GEN-LAST:event_paymentTableMousePressed

    private void paymentTableMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_paymentTableMouseReleased
        doPaymentsPopup(evt);
    }//GEN-LAST:event_paymentTableMouseReleased

    private void deletePaymentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deletePaymentActionPerformed
        deleteSelectedPayment();
    }//GEN-LAST:event_deletePaymentActionPerformed

    private void gernerateAllBillsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_gernerateAllBillsActionPerformed
        //Controller.getInstance().createAllBills(new Date("11/10/12"), new Date("12/14/12"));
        Date[] dates = openGenerateBillPanel();
        if(dates != null)
            Controller.getInstance().createAllBills(dates[0], dates[1]);
    }//GEN-LAST:event_gernerateAllBillsActionPerformed

    private void generateBillActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_generateBillActionPerformed
        Date[] dates = openGenerateBillPanel();
        int selAccID = getSelectedAccountID();
        if(dates != null)
            Controller.getInstance().createBill(selAccID, dates[0], dates[1]);
    }//GEN-LAST:event_generateBillActionPerformed

    private void manualBalanceEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_manualBalanceEditActionPerformed
        openEditBalancePanel();
    }//GEN-LAST:event_manualBalanceEditActionPerformed
    
    private Account getAccountFromAccountPanel()
    {
        int accountID = -1;
        try
        {
            accountID = Integer.parseInt(accountIDField.getText());
        }
        catch(Exception e)
        {

        }
        
        if(accountID < 1 || Controller.getInstance().hasAccountID(accountID))
        {
            accountIDField.setBackground(new Color(255, 200, 200));
            return null;
        }

        Account temp;
        String fName = firstNameField.getText();
        String lName = lastNameField.getText();
        String cName = compNameField.getText();
        Address addr = new Address(addLine1Field.getText(), 
                                    addLine2Field.getText(), 
                                    cityField.getText(), 
                                    stateField.getText(), 
                                    zipField.getText());
        
        
        if(accountButtonGroup.isSelected(resAccButton.getModel()))
        {
            temp = new ResidentialAccount(fName, lName, accountID, 0, false, new Date(), addr);
        }
        else if(accountButtonGroup.isSelected(comAccButton.getModel()))
        {
            temp = new CommercialAccount(cName, accountID, 0, false, new Date(), addr);
        }
        else
            temp = null;
        return temp;
        
    }
    
    private Meter getMeterFromViewMeterPanel()
    {
        int meterID = -1;
        double meterRate = -1;
        
        try
        {
            meterID = Integer.parseInt(viewMeterIDField.getText());
            meterRate = Double.parseDouble(viewMeterRateField.getText());
        }
        catch(Exception e){}
        
        if(meterID < 1 || meterRate < 0)
            return null;
        
        Address addr = new Address(viewMeterAdd1Field.getText(), viewMeterAdd2Field.getText(),
                                        viewMeterCityField.getText(), viewMeterStateField.getText(),
                                        viewMeterZipField.getText());
        
        clearAddMeterPanel();
        
        return new Meter(meterID, viewMeterComboBox.getSelectedItem().toString(), 
                            meterRate, addr);
    }
    
    //////////////////////////////////////////////////////////////////////////
    // Displayers
    //
    // These methods handle displaying information and parsing data for 
    // different panels. Generally, each method is linked to a specific
    // action, but some methods may be called by more than one action. 
    // Many of these methods, if not all, prompt for user input by opening
    // the panels in JDialogs. 
    //////////////////////////////////////////////////////////////////////////
    
    private Date[] openGenerateBillPanel()
    {
        String options[] = {"Ok", "Cancel"};
        //Account selectedAccount = getSelectedAccount();
        int result = JOptionPane.showOptionDialog(null, generateBillDatePanel, 
                         "Enter billing period", JOptionPane.DEFAULT_OPTION, JOptionPane.PLAIN_MESSAGE, null, options, options[0]);
        
        Date[] dates = new Date[2];
        if(result == 0)
        {
            Date startDate = new Date();
            Date endDate = new Date();
            DateFormat formatter = new SimpleDateFormat("MM/dd/yy");
            
            try
            {
                startDate = formatter.parse(generateBillStartDateField.getText());
                endDate = formatter.parse(generateBillEndDateField.getText());
                
                if(startDate.compareTo(endDate) > 0)
                    throw new Exception();
                
                dates[0] = startDate;
                dates[1] = endDate;
            }
            catch(Exception e)
            {
                failToGenerateBillDialog();
            }
        }
        resetGenerateBillPanel();
        return dates;
    }
    
    private void openEditBalancePanel()
    {
        String options[] = {"Ok", "Cancel"};
        Account selectedAccount = getSelectedAccount();
        editBalanceOldField.setText(String.format("%.2f", selectedAccount.getBalance()));
        int result = JOptionPane.showOptionDialog(null, editBalancePanel, 
                         "Edit the balance for Account " +  getSelectedAccountID(), JOptionPane.DEFAULT_OPTION, JOptionPane.PLAIN_MESSAGE, null, options, options[0]);
        
        if(result == 0)
        {
            double newBal = 0.0;
            
            try
            {
                newBal = Double.parseDouble(editBalanceNewField.getText());
            }
            catch(Exception e)
            {
                failToEditBalanceDialog();
            }
            
            selectedAccount.setBalance(newBal);
            clearEditBalancePanel();
        }
    }
    
    private void openViewPaymentPanel()
    {
        String options[] = {"Ok", "Cancel"};
        Account selectedAccount = getSelectedAccount();
        paymentTable.setModel(new PaymentViewTableModel(selectedAccount.getPaymentHistory()));
        int result = JOptionPane.showOptionDialog(null, viewPaymentsPanel, 
                         "View Payments for Account " + getSelectedAccountID(), JOptionPane.DEFAULT_OPTION, JOptionPane.PLAIN_MESSAGE, null, options, options[0]);
    }
    
    private void openAddPaymentPanel()
    {
        String options[] = {"Ok", "Cancel"};
        Account selectedAccount = getSelectedAccount();
        int result = JOptionPane.showOptionDialog(null, addPaymentPanel, 
                         "Add a Payment to Account " + getSelectedAccountID(), JOptionPane.DEFAULT_OPTION, JOptionPane.PLAIN_MESSAGE, null, options, options[0]);
        
        boolean failed = false;
        if(result == 0)
        {
            double paidAmount = -1;
            Date d = new Date();
            
            try
            {
                paidAmount = Double.parseDouble(addPaymentPaidAmountField.getText());
                DateFormat formatter = new SimpleDateFormat("MM/dd/yy h:mm a z");
                String dateLine = addPaymentDateField.getText() + " "
                        + addPaymentTimeField.getText() + " " 
                        + addPaymentAMPMComboBox.getSelectedItem().toString() + " "
                        + addPaymentTimeZoneField.getText();
                d = formatter.parse(dateLine);
            }
            catch(Exception e)
            {
                failed = true;
            }
            
            if(paidAmount < 0)
                failed = true;
            
            if(!failed)
            {  
                resetAddPaymentPanel();
                Account selAcc = getSelectedAccount();
                selAcc.addPayment(new Payment(paidAmount, addPaymentTypeComboBox.getSelectedItem().toString(), d));
                updateJTable(paymentTable);
            }
            else
            {
                failToCreatePaymentDialog();
            }
            
        }
    }
    
    private void openAddTaxPanel()
    {
        boolean failed = false;
        String options[] = {"Create", "Cancel"};
        int result = JOptionPane.showOptionDialog(null, addTaxPanel, 
                         "Add a Tax to Meter " + getSelectedMeterID(), JOptionPane.DEFAULT_OPTION, JOptionPane.PLAIN_MESSAGE, null, options, options[0]);
        if(result == 0)
        {
            double taxRate = -1;
            String name = "";
            
            try
            {
                taxRate = Double.parseDouble(addTaxRateField.getText());
                name = addTaxNameField.getText();
            }
            catch(Exception e)
            {
                failed = true;
            }
            
            if(taxRate < 0.0)
                failed = true;
            
            if(!failed)
            {
                clearAddTaxPanel();
                Meter m = getSelectedMeter();
                m.addTax(new Taxes(name, taxRate));
                updateJTable(taxTable);
            }
            else
            {
                failToCreateTaxDialog();
            }
            
        }
    }
    
    private void openAddMeterPanel()
    { 
        boolean failure = false;
        String options[] = {"Create",  "Cancel"};
        int result = JOptionPane.showOptionDialog(null, addMeterPanel, 
                         "Add Meter to Account " + getSelectedAccountID(), JOptionPane.DEFAULT_OPTION, JOptionPane.PLAIN_MESSAGE, null, options, options[0]);

        if(result == 0)
        {
            Meter m = getMeterFromAddMeterPanel();
            Account temp = getSelectedAccount();
            if(m != null)
            {
                if(temp instanceof ResidentialAccount)
                {
                    ResidentialAccount resAcc = (ResidentialAccount)temp;
                    if(resAcc.getMeter() != null)
                    {
                        boolean overWrite = confirmResidentialAccountConflict();
                        if(!overWrite)
                            return;
                    }
                }
                else if(temp.hasMeter(m.getMeterID()))
                {
                    failure = true;
                }
            }
            else
            {
                failure = true;
            }
            if(!failure)
            {    
                temp.addMeter(m);
                System.out.println(m.getMeterID());
                showMetersInMeterTable(temp);
            }
            else
            {
                failToCreateMeterDialog();
            }
        }
    }

    
    private void openAddMeterReadingPanel()
    {
        boolean failed = false;
        String options[] = {"Create", "Cancel"};
        int result = JOptionPane.showOptionDialog(null, addMeterReadingPanel, 
                         "Add a Meter Reading to Meter " +  getSelectedMeter(), JOptionPane.DEFAULT_OPTION, JOptionPane.PLAIN_MESSAGE, null, options, options[0]);
        if(result == 0)
        {
            int meterReading = -1;
            Date d = new Date();
            
            try
            {
                meterReading = Integer.parseInt(addMeterReadingField.getText());
                DateFormat formatter = new SimpleDateFormat("MM/dd/yy h:mm a z");
                String dateLine = addMeterReadingDateField.getText() + " "
                        + addMeterReadingTimeField.getText() + " " 
                        + addMeterReadingAMPMComboBox.getSelectedItem().toString() + " "
                        + addMeterReadingTimeZoneField.getText();
                d = formatter.parse(dateLine);
            }
            catch(Exception e)
            {
                failed = true;
            }
            
            if(meterReading < 0)
                failed = true;
            
            if(!failed)
            {  
                resetAddMeterReadingPanel();
                Meter m = getSelectedMeter();
                m.addReading(new Meter_Reading(meterReading, d), false);
                updateJTable(meterReadingTable);
            }
            else
            {
                failToCreateMeterReadingDialog();
            }
            
        }
    }
    
    private void openViewMeterPanel()
    {    
        String options[] = {"Save", "Close"};
        Meter m = getSelectedMeter();
        showMeterInViewMeterPanel(m);
        int result = JOptionPane.showOptionDialog(null, viewMeterPanel, 
                         "View Meter " + getSelectedMeterID() + " for Account " + getSelectedAccountID(), JOptionPane.DEFAULT_OPTION, JOptionPane.PLAIN_MESSAGE, null, options, options[0]);
        
        if(result == 0)
        {
            Account selectedAccount = getSelectedAccount();
            Meter newMeter = getMeterFromViewMeterPanel();
            if(newMeter == null)
            {
                failToEditMeterDialog();
            }
            else
            {
                m.setMeterID(newMeter.getMeterID());
                m.setMeterRate(newMeter.getMeterRate());
                m.setPhysicalAddress(newMeter.getPhysicalAddress());
                updateJTable(meterViewTable);
            }           
        }
        // TODO add your handling code here:
    }
    
    private void showMeterInViewMeterPanel(Meter m)
    {
        clearViewMeterPanel();
        meterReadingTable.setModel(new MeterReadingViewTableModel(m.getReadings()));
        taxTable.setModel(new TaxViewTableModel(m.getTaxes()));
        
        viewMeterIDField.setText(m.getMeterID() + "");
        viewMeterRateField.setText(m.getMeterRate() + "");
        Address addr = m.getPhysicalAddress();
        viewMeterAdd1Field.setText(addr.getLocation1());
        viewMeterAdd2Field.setText(addr.getLocation2());
        viewMeterCityField.setText(addr.getCity());
        viewMeterStateField.setText(addr.getState());
        viewMeterZipField.setText(addr.getZip());
    }
    
    private Meter getMeterFromAddMeterPanel()
    {      
        int meterID = -1;
        double meterRate = -1;
        try
        {
            meterID = Integer.parseInt(meterIDField.getText());
            meterRate = Double.parseDouble(meterRateField.getText());
        }
        catch(Exception e){}
        if(meterID < 1 || meterRate < 0)
            return null;
        
        Address addr = new Address(meterAddLine1Field.getText(), meterAddLine2Field.getText(),
                                        meterCityField.getText(), meterStateField.getText(),
                                        meterZipField.getText());
        
        clearAddMeterPanel();
        
        return new Meter(meterID, meterTypeComboBox.getSelectedItem().toString(), 
                            meterRate, addr);
    }
    
    private void showInAccountPanel(Account temp)
    {
        clearTextInAccountPanel();
        clearFieldColorsInAccountPanel();
        
        if(temp == null)
            return;

        Address addr = temp.getBillingAddress();
        
        if(temp instanceof ResidentialAccount)
        {
            ResidentialAccount resAcc = (ResidentialAccount)temp;
            firstNameField.setText(resAcc.getClientFirstName());
            lastNameField.setText(resAcc.getClientLastName());
            compNameField.setText("");
            accountButtonGroup.setSelected(resAccButton.getModel(), true);
            enableNameFields(RESIDENTIAL);
        }
        else if(temp instanceof CommercialAccount)
        {
            CommercialAccount comAcc = (CommercialAccount)temp;
            compNameField.setText(comAcc.getCompanyName());
            lastNameField.setText("");
            firstNameField.setText("");
            accountButtonGroup.setSelected(comAccButton.getModel(), true);
            enableNameFields(COMMERCIAL);

        }
        
        accountIDField.setText("" + temp.getAccountID());
        addLine1Field.setText(addr.getLocation1());
        addLine2Field.setText(addr.getLocation2());
        cityField.setText(addr.getCity());
        stateField.setText(addr.getState());
        zipField.setText(addr.getZip());
        
        showMetersInMeterTable(temp);
        enableComResButtons(false);
        accCreate.setEnabled(false);
        accSave.setEnabled(true);
    }
    
    private void showMetersInMeterTable(Account acc)
    {
        if(acc instanceof CommercialAccount)
        {
            meterViewTable.setModel(new MeterViewTableModel(((CommercialAccount)acc).getMeters()));
        }
        else if(acc instanceof ResidentialAccount)
        {
            meterViewTable.setModel(new MeterViewTableModel(((ResidentialAccount)acc).getMeter()));
        }
        else
        {
            meterViewTable.setModel(new MeterViewTableModel());
  
        }
    }
    
    private void updateJTable(JTable table)
    {
        TableModel model = table.getModel();
        if(model instanceof AbstractTableModel)
        {
            ((AbstractTableModel)(model)).fireTableDataChanged();
        }
    }
    //////////////////////////////////////////////////////////////////////////
    // Selection Getters
    //
    // These methods are incredibly important for many of the methods.
    // Their main function is to determine which objects have been selected in
    // in the JTable views. 
    //
    // Hopefully, there can be some more robust case checking on these 
    // getters.
    //////////////////////////////////////////////////////////////////////////
    
    private int getSelectedMeterID()
    {
        int row = meterViewTable.getSelectedRow();
        Object temp = meterViewTable.getValueAt(row, 0);
        if(!(temp instanceof Integer))
            return -1;
        int meterID = ((Integer)temp).intValue();
        return meterID;
    }
    
    private Meter getSelectedMeter()
    {
        Account temp = getSelectedAccount();
        Meter m = temp.getMeter(getSelectedMeterID());
        return m;
    }
    
    /**
     * Returns the currently selected row in the account table. Returns -1 if
     * for some reason the accountTable does not return an Integer
     * 
     * @return 
     */
    private int getSelectedAccountID()
    {
        int row = accountTable.getSelectedRow();
        if(row < 0)
            return -1;
        Object temp = accountTable.getValueAt(row, 0);
        if(!(temp instanceof Integer))
            return -1;
        int accID = ((Integer)temp).intValue();
        return accID;
    }
    
    private Account getSelectedAccount()
    {
        int accID = getSelectedAccountID();
        return Controller.getInstance().getAccount(accID);
    }
    
    //////////////////////////////////////////////////////////////////////////
    // Enablers
    //
    // These methods handle the toggling of different buttons and fields 
    // in the main viewing panel. This makes sure the user is less responsible
    // for conusing input. For example, one of the Enablers toggling between
    // First Name/Last Name fields and the Company Name Field. This is useful
    // for limiting user confusion when creating new accounts. 
    //////////////////////////////////////////////////////////////////////////
    
    /**
     * Enable and disable the name fields based on the account type presented. 
     * Note, only one option should ever be open.
     * 
     * @param type The type of account passed to it. See int delcarations.
     */
    private void enableNameFields(int type)
    {
        if(type == RESIDENTIAL)
        {
            firstNameField.setEnabled(true);
            lastNameField.setEnabled(true);
            compNameField.setEnabled(false);
        }
        else if(type == COMMERCIAL)
        {
            firstNameField.setEnabled(false);
            lastNameField.setEnabled(false);
            compNameField.setEnabled(true);
        }
            
    }
    
    private void enableComResButtons(boolean enable)
    {
        resAccButton.setEnabled(enable);
        comAccButton.setEnabled(enable);
    }
    
    //////////////////////////////////////////////////////////////////////////
    // Deletion handlers
    //
    // These methods handle instances where objects need to be deleted from 
    // different parts in the model. Generally, most of the deletion methods
    // require some sort of established selection in the Table views that 
    // are presented to the user. Technically speaking, the confirmation
    // dialogs are included in this group since they also delete objects. 
    //
    // Hopefully, each method will have some comments indicating the
    // the preconditions necessary.
    //////////////////////////////////////////////////////////////////////////
    
    //TODO add more robust checking for deletion
    
    private void deleteSelectedMeterReading()
    {
        Meter m = getSelectedMeter();
        int row = meterReadingTable.getSelectedRow();
        if(row >= 0)
        {    
            Date d = (Date)meterReadingTable.getValueAt(row, 0);
            m.deleteReading(d);
            updateJTable(meterReadingTable);
        }
    }
    
    private void deleteSelectedTax()
    {
        Meter m = getSelectedMeter();
        int row = taxTable.getSelectedRow();
        if(row >= 0)
        {    
            String name = (String)taxTable.getValueAt(row, 0);
            m.deleteTax(name);
            updateJTable(taxTable);
        }
    }
    
    private void deleteSelectedPayment()
    {
        Account selected = getSelectedAccount();
        int row = paymentTable.getSelectedRow();
        if(row >= 0)
        {    
            Date d = (Date)paymentTable.getValueAt(row, 0);
            selected.deletePayment(d);
            updateJTable(paymentTable);
        }
    }
    
    
    //////////////////////////////////////////////////////////////////////////
    // Confirmation Dialogs (Sub group of deletion Handlers)
    //
    // These methods are used to confirm with the user on critical
    // and curretnly irreversible actions. Currently, the two actions
    // considered this critcial are deleting a meter, and deleting and account
    //////////////////////////////////////////////////////////////////////////
    
    /**
     * Method that displays a confirmation dialog to make sure the user really
     * wants to delete this account. It returns the deleted account or null if 
     * the user doesnt want to delete the account. 
     * 
     * @param accountID The account ID of the account to delete.
     * @return The account deleted. 
     */
    private Account confirmAccountDelete(int accountID)
    {
        Object[] options = {"Yes", "No"};
        JPanel myPanel = new JPanel();
        myPanel.add(new JLabel("Delete Account with the ID:" +  accountID + "?"));
        
        int result = JOptionPane.showOptionDialog(null, myPanel, 
                   "Confirm Deletion", JOptionPane.DEFAULT_OPTION, JOptionPane.INFORMATION_MESSAGE, null, options, options[0]);
        
        if(result != 0)
            return null;
        
        Account temp = Controller.getInstance().deleteAccount(accountID);
        //Call to tell the table to update
        updateJTable(accountTable);
        System.out.println("ACCOUNT DELETED");
        return temp;
    }
    
    /**
     * Method that confirms if the user really wanted to delete the selected meter.
     * Returns null the there was no meter deleted. 
     * 
     * @return the Meter that was deleted. 
     */
    private Meter confirmMeterDelete()
    {
        Object[] options = {"Yes", "No"};
        
        int result = JOptionPane.showOptionDialog(null, "Are you sure you want to delete this meter?", 
                   "Confirm Deletion", JOptionPane.DEFAULT_OPTION, JOptionPane.INFORMATION_MESSAGE, null, options, options[0]);
        
        if(result != 0)
            return null;
        
        Account selectedAccount = getSelectedAccount();
        Meter temp = selectedAccount.deleteMeter(getSelectedMeterID());
        //Call to tell the table to update
        updateJTable(meterViewTable);
        System.out.println("METER DELETED");
        return temp;
    }
    
    
    /**
     * Method to confirm a user's decision to overwrite a residential account meter.
     * The method returns true if the user wishes to continue, and false if the 
     * user canceled, or does does not want to continue. 
     * 
     * @return 
     */
    private boolean confirmResidentialAccountConflict()
    {
        String meterCheckOptions[] = {"Yes", "No", "Cancel"};
        int meterCheck = JOptionPane.showOptionDialog(null, "This account is a Residential Account. Adding a new Meter will overwrite the current one.\nDo you wish to continue?", 
                "Residential Account Conflict", JOptionPane.DEFAULT_OPTION, JOptionPane.PLAIN_MESSAGE, null, meterCheckOptions, meterCheckOptions[0]);
        if(meterCheck == 0)
            return true;
        else
            return false;
        
    }
    
    //////////////////////////////////////////////////////////////////////////
    // Reset and Clear Handlers
    //
    // These methods are used to reset the panels used in the UI. Most of the
    // panels are cleared, but some exceptions such as the add meter reading 
    // panel are not reset because they contain format guidelines for the user
    //////////////////////////////////////////////////////////////////////////
    
    /**
     * Resets the info in the account panel. It clears all the text and resets 
     * all the colors of the text fields. It also clears the meters displayed
     * in the meter panel. Resetting the account panel also reeanbles the create
     * button and disables the save/edit button. It also re-enables the account 
     * buttons.
     * 
     */
    private void resetAccountInfoPanel()
    {
        clearTextInAccountPanel();
        clearFieldColorsInAccountPanel();
        
        showMetersInMeterTable(null);
        enableComResButtons(true);
        accCreate.setEnabled(true);
        accSave.setEnabled(false);
    }
    
    /**
     * Resets all the text fields in the view meter panel.
     */
    private void clearViewMeterPanel()
    {
        viewMeterIDField.setText("");
        viewMeterRateField.setText("");
        viewMeterAdd1Field.setText("");
        viewMeterAdd2Field.setText("");
        viewMeterCityField.setText("");
        viewMeterStateField.setText("");
        viewMeterZipField.setText("");
    }
    
    /**
     * Resets all the text fields in the add meter panel.
     */
    private void clearAddMeterPanel()
    {
        meterIDField.setText("");
        meterRateField.setText("");
        meterAddLine1Field.setText("");
        meterAddLine2Field.setText("");
        meterCityField.setText("");
        meterStateField.setText("");
        meterZipField.setText("");
    }
    
    /**
     * Only clears text in the account panel.
     */
    private void clearTextInAccountPanel()
    {
        compNameField.setText("");
        lastNameField.setText("");
        firstNameField.setText("");

        accountIDField.setText("");
        addLine1Field.setText("");
        addLine2Field.setText("");
        cityField.setText("");
        stateField.setText("");
        zipField.setText("");
    }
    
    /**
     * Only clears the background colors of the account panel.
     * 
     */
    private void clearFieldColorsInAccountPanel()
    {
        compNameField.setBackground(Color.WHITE);
        lastNameField.setBackground(Color.WHITE);
        firstNameField.setBackground(Color.WHITE);

        accountIDField.setBackground(Color.WHITE);
        addLine1Field.setBackground(Color.WHITE);
        addLine2Field.setBackground(Color.WHITE);
        cityField.setBackground(Color.WHITE);
        stateField.setBackground(Color.WHITE);
        zipField.setBackground(Color.WHITE);
    }   
    
    /**
     * Clears the text in the add tax panel. 
     */    
    private void clearAddTaxPanel()
    {
        addTaxNameField.setText("");
        addTaxRateField.setText("");
    }

    /**
     * Resets the text in the add meter panel. The timezone field is left so 
     * the user does not have to enter the same time zone again and again. The
     * date and time fields are set to display the required format. 
     */
    private void resetAddMeterReadingPanel()
    {
        addMeterReadingField.setText("");
        addMeterReadingDateField.setText("mm/dd/yy");
        addMeterReadingTimeField.setText("mm:hh");
        //Commenting out this lines allows the user to keep the timezone
        //addMeterReadingTimeZoneField.setText("");
    }
    
    /**
     * Resets the text in the add payment panel. The timezone field is left so 
     * the user does not have to enter the same time zone again and again. The
     * date and time fields are set to display the required format.
     */
    private void resetAddPaymentPanel()
    {
        addPaymentDateField.setText("mm/dd/yy");
        addPaymentTimeField.setText("mm:hh");
        addPaymentPaidAmountField.setText("");
        //Commenting out this lines allows the user to keep the timezone
        //addPaymentTimeZoneField.setText("");
    }
    
    /**
     * Resets the text in the generate panel to the default date formats. 
     * 
     */
    private void resetGenerateBillPanel()
    {
        generateBillEndDateField.setText("mm/dd/yy");
        generateBillStartDateField.setText("mm/dd/yy");
    }
    
    /**
     * Resets the edit balance panel.
     */
    private void clearEditBalancePanel()
    {
        editBalanceNewField.setText("");
        editBalanceOldField.setText("");
    }
    
    //////////////////////////////////////////////////////////////////////////
    // Fail Dialog Handlers
    //
    // These are basic message dialogs to display certain failures. Most of 
    // these are self explanatory. 
    //////////////////////////////////////////////////////////////////////////
    
    private void failToCreateMeterReadingDialog()
    {
        JOptionPane.showMessageDialog(null, "Could not create meter reading. Please check your values.");
    }
    private void failToCreateMeterDialog()
    {
        JOptionPane.showMessageDialog(null, "Could not create meter. Please check your values.");
    }
    private void failToEditMeterDialog()
    {
        JOptionPane.showMessageDialog(null, "Could not edit meter. Please check your values");
    }
    private void failToCreateTaxDialog()
    {
        JOptionPane.showMessageDialog(null, "Could not create tax. Please check your values");
    }
    private void failToCreatePaymentDialog()
    {
        JOptionPane.showMessageDialog(null, "Could not create payment. Please check your values");
    }
    private void failToGenerateBillDialog()
    {
        JOptionPane.showMessageDialog(null, "Could not create bill. Please check your values");
    }
    private void failToEditBalanceDialog()
    {
        JOptionPane.showMessageDialog(null, "Could not edit account balance. Please check your values");
    }
    
    
    //////////////////////////////////////////////////////////////////////////
    // Popup Handlers
    //
    // These methods handle all of the popups that appear in the UI. The
    // majority if not all of these methods are called by right clicks
    // in some JTable. The table name corresponds to the table where the popup
    // acts.
    //////////////////////////////////////////////////////////////////////////
    
     /**
     * Actual method to respond to a call for a popup event. Checks if the event is the
     * popup trigger and then responds accordingly. The accounts popup is the largest
     * popup menu in the program.
     * 
     * @param evt The event passed to this action.
     */
    private void doAccountPopup(java.awt.event.MouseEvent evt)
    {
        if(evt.isPopupTrigger())
        {
            Point p = evt.getPoint();
            int row = accountTable.rowAtPoint(p);
            accountTable.getSelectionModel().setSelectionInterval(row, row);
            Account temp = getSelectedAccount();
            showInAccountPanel(temp);
            accountPopup.show(evt.getComponent(), evt.getX(), evt.getY());
        }
    }        
    
    /**
     * Opens the popup for the Meter  table
     * 
     * @param evt The click in the meter table.
     */
    private void doMeterPopup(java.awt.event.MouseEvent evt)
    {
        if(evt.isPopupTrigger())
        {
            Point p = evt.getPoint();
            int row = meterViewTable.rowAtPoint(p);
            meterViewTable.getSelectionModel().setSelectionInterval(row, row);
            Account temp = getSelectedAccount();
            Meter m = temp.getMeter(getSelectedMeterID());
            //showInAccountPanel(temp);
            meterPopup.show(evt.getComponent(), evt.getX(), evt.getY());
        }
    }
    
    /**
     * Opens the popup for the tax table
     * 
     * @param evt The click in the tax table.
     */
    private void doTaxPopup(java.awt.event.MouseEvent evt)
    {
        if(evt.isPopupTrigger())
        {
            Point p = evt.getPoint();
            int row = taxTable.rowAtPoint(p);
            taxTable.getSelectionModel().setSelectionInterval(row, row);
            //showInAccountPanel(temp);
            taxPopup.show(evt.getComponent(), evt.getX(), evt.getY());
        }
    }
    
     /**
     * Opens the popup for the Meter Readings table
     * 
     * @param evt The click in the meter reading table.
     */
    private void doMeterReadingPopup(java.awt.event.MouseEvent evt)
    {
        if(evt.isPopupTrigger())
        {
            Point p = evt.getPoint();
            int row = meterReadingTable.rowAtPoint(p);
            meterReadingTable.getSelectionModel().setSelectionInterval(row, row);
            //showInAccountPanel(temp);
            meterReadingPopup.show(evt.getComponent(), evt.getX(), evt.getY());
        }
    }
    
    /**
     * Opens the popup for the payments table
     * 
     * @param evt The click in the payments table.
     */
    private void doPaymentsPopup(java.awt.event.MouseEvent evt)
    {
        if(evt.isPopupTrigger())
        {
            Point p = evt.getPoint();
            int row = paymentTable.rowAtPoint(p);
            paymentTable.getSelectionModel().setSelectionInterval(row, row);
            paymentPopup.show(evt.getComponent(), evt.getX(), evt.getY());
        }
    }

//quickAddPayment.addActionListener(new java.awt.event.ActionListener() {
//            public void actionPerformed(java.awt.event.ActionEvent evt) {
//                quickAddPaymentActionPerformed(evt);
//            }
//        });

    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(UserInterface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(UserInterface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(UserInterface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(UserInterface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new UserInterface().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton accCancel;
    private javax.swing.JButton accCreate;
    private javax.swing.JButton accSave;
    private javax.swing.ButtonGroup accountButtonGroup;
    private javax.swing.JLabel accountID;
    private javax.swing.JTextField accountIDField;
    private javax.swing.JPanel accountInfoPanel;
    private javax.swing.JPanel accountPanel;
    private javax.swing.JPopupMenu accountPopup;
    private javax.swing.JScrollPane accountScrollPane;
    private javax.swing.JTable accountTable;
    private javax.swing.JTextField addLine1Field;
    private javax.swing.JTextField addLine2Field;
    private javax.swing.JLabel addMeterDateLabel;
    private javax.swing.JPanel addMeterPanel;
    private javax.swing.JComboBox addMeterReadingAMPMComboBox;
    private javax.swing.JButton addMeterReadingButton;
    private javax.swing.JTextField addMeterReadingDateField;
    private javax.swing.JTextField addMeterReadingField;
    private javax.swing.JLabel addMeterReadingLabel;
    private javax.swing.JLabel addMeterReadingNote;
    private javax.swing.JPanel addMeterReadingPanel;
    private javax.swing.JTextField addMeterReadingTimeField;
    private javax.swing.JLabel addMeterReadingTimeLabel;
    private javax.swing.JLabel addMeterReadingTimeZoneExample;
    private javax.swing.JTextField addMeterReadingTimeZoneField;
    private javax.swing.JLabel addMeterReadingTimeZoneLabel;
    private javax.swing.JLabel addMeterReadingkWh;
    private javax.swing.JMenuItem addMeterToAccount;
    private javax.swing.JComboBox addPaymentAMPMComboBox;
    private javax.swing.JTextField addPaymentDateField;
    private javax.swing.JLabel addPaymentDateLabel;
    private javax.swing.JLabel addPaymentNote;
    private javax.swing.JLabel addPaymentNote1;
    private javax.swing.JLabel addPaymentNote3;
    private javax.swing.JTextField addPaymentPaidAmountField;
    private javax.swing.JLabel addPaymentPaidAmountLabel;
    private javax.swing.JPanel addPaymentPanel;
    private javax.swing.JTextField addPaymentTimeField;
    private javax.swing.JLabel addPaymentTimeLabel;
    private javax.swing.JLabel addPaymentTimeZoneExample;
    private javax.swing.JTextField addPaymentTimeZoneField;
    private javax.swing.JLabel addPaymentTimeZoneLabel;
    private javax.swing.JComboBox addPaymentTypeComboBox;
    private javax.swing.JLabel addPaymentTypeField;
    private javax.swing.JLabel addPaymentUSDLabel;
    private javax.swing.JButton addTaxButton;
    private javax.swing.JTextField addTaxNameField;
    private javax.swing.JLabel addTaxNameLabel;
    private javax.swing.JLabel addTaxNote1;
    private javax.swing.JLabel addTaxNote2;
    private javax.swing.JLabel addTaxNote3;
    private javax.swing.JLabel addTaxNote4;
    private javax.swing.JPanel addTaxPanel;
    private javax.swing.JTextField addTaxRateField;
    private javax.swing.JLabel addTaxRateLabel;
    private javax.swing.JLabel addressLine1;
    private javax.swing.JLabel addressLine2;
    private javax.swing.JPanel buttonPanel;
    private javax.swing.JLabel city;
    private javax.swing.JTextField cityField;
    private javax.swing.JRadioButton comAccButton;
    private javax.swing.JLabel compName;
    private javax.swing.JTextField compNameField;
    private javax.swing.JMenuItem deleteAccount;
    private javax.swing.JMenuItem deleteAccountPopup;
    private javax.swing.JMenuItem deleteMeter;
    private javax.swing.JMenuItem deleteMeterReading;
    private javax.swing.JButton deleteMeterReadingButton;
    private javax.swing.JMenuItem deletePayment;
    private javax.swing.JMenuItem deleteTax;
    private javax.swing.JButton deleteTaxButton;
    private javax.swing.JLabel editBalanceFieldNote2;
    private javax.swing.JTextField editBalanceNewField;
    private javax.swing.JLabel editBalanceNewLabel;
    private javax.swing.JLabel editBalanceNote1;
    private javax.swing.JTextField editBalanceOldField;
    private javax.swing.JLabel editBalanceOldLabel;
    private javax.swing.JPanel editBalancePanel;
    private javax.swing.JLabel editBalanceUSDLabel;
    private javax.swing.JLabel editBalanceUSDLabel1;
    private javax.swing.JLabel firstName;
    private javax.swing.JTextField firstNameField;
    private javax.swing.JMenuItem generateBill;
    private javax.swing.JPanel generateBillDatePanel;
    private javax.swing.JTextField generateBillEndDateField;
    private javax.swing.JLabel generateBillEndDateLabel;
    private javax.swing.JLabel generateBillNote;
    private javax.swing.JTextField generateBillStartDateField;
    private javax.swing.JLabel generateBillStartDateLabel;
    private javax.swing.JMenuItem gernerateAllBills;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JPopupMenu.Separator jSeparator2;
    private javax.swing.JPopupMenu.Separator jSeparator3;
    private javax.swing.JPopupMenu.Separator jSeparator4;
    private javax.swing.JPopupMenu.Separator jSeparator5;
    private javax.swing.JPopupMenu.Separator jSeparator6;
    private javax.swing.JLabel lastName;
    private javax.swing.JTextField lastNameField;
    private javax.swing.JSplitPane mainSplitPane;
    private javax.swing.JMenuItem manualBalanceEdit;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JMenu menuEdit;
    private javax.swing.JMenu menuFile;
    private javax.swing.JTextField meterAddLine1Field;
    private javax.swing.JLabel meterAddLine1Label;
    private javax.swing.JTextField meterAddLine2Field;
    private javax.swing.JLabel meterAddLine2Label;
    private javax.swing.JTextField meterCityField;
    private javax.swing.JLabel meterCityLabel;
    private javax.swing.JTextField meterIDField;
    private javax.swing.JLabel meterIDLabel;
    private javax.swing.JLabel meterNote1;
    private javax.swing.JLabel meterNote2;
    private javax.swing.JLabel meterNote3;
    private javax.swing.JPopupMenu meterPopup;
    private javax.swing.JTextField meterRateField;
    private javax.swing.JLabel meterRateLabel;
    private javax.swing.JLabel meterRatekWh;
    private javax.swing.JPopupMenu meterReadingPopup;
    private javax.swing.JTable meterReadingTable;
    private javax.swing.JTextField meterStateField;
    private javax.swing.JLabel meterStateLabel;
    private javax.swing.JComboBox meterTypeComboBox;
    private javax.swing.JLabel meterTypeLabel;
    private javax.swing.JScrollPane meterViewSrollPane;
    private javax.swing.JTable meterViewTable;
    private javax.swing.JTextField meterZipField;
    private javax.swing.JLabel meterZipLabel;
    private javax.swing.JLabel optionalLabel;
    private javax.swing.JPopupMenu paymentPopup;
    private javax.swing.JTable paymentTable;
    private javax.swing.JMenuItem quickAddMeterReading;
    private javax.swing.JMenuItem quickAddPayment;
    private javax.swing.JMenuItem quickAddTax;
    private javax.swing.JRadioButton resAccButton;
    private javax.swing.JSplitPane rightSplitPane;
    private javax.swing.JMenuItem save;
    private javax.swing.JLabel state;
    private javax.swing.JTextField stateField;
    private javax.swing.JPopupMenu taxPopup;
    private javax.swing.JTable taxTable;
    private javax.swing.JMenuItem viewMeter;
    private javax.swing.JTextField viewMeterAdd1Field;
    private javax.swing.JLabel viewMeterAdd1Label;
    private javax.swing.JTextField viewMeterAdd2Field;
    private javax.swing.JLabel viewMeterAdd2Label;
    private javax.swing.JTextField viewMeterCityField;
    private javax.swing.JLabel viewMeterCityLabel;
    private javax.swing.JComboBox viewMeterComboBox;
    private javax.swing.JTextField viewMeterIDField;
    private javax.swing.JLabel viewMeterIDLabel;
    private javax.swing.JLabel viewMeterNote1;
    private javax.swing.JLabel viewMeterNote2;
    private javax.swing.JLabel viewMeterNote3;
    private javax.swing.JPanel viewMeterPanel;
    private javax.swing.JLabel viewMeterPanelOptionNote;
    private javax.swing.JTextField viewMeterRateField;
    private javax.swing.JLabel viewMeterRateLabel;
    private javax.swing.JScrollPane viewMeterReadingTable;
    private javax.swing.JTextField viewMeterStateField;
    private javax.swing.JLabel viewMeterStateLabel;
    private javax.swing.JScrollPane viewMeterTaxTable;
    private javax.swing.JPanel viewMeterTopLeftPanel;
    private javax.swing.JPanel viewMeterTopRightPanel;
    private javax.swing.JLabel viewMeterTypeLabel;
    private javax.swing.JTextField viewMeterZipField;
    private javax.swing.JLabel viewMeterZipLabel;
    private javax.swing.JLabel viewMeterkWhLabel;
    private javax.swing.JMenuItem viewPayments;
    private javax.swing.JButton viewPaymentsAddButton;
    private javax.swing.JButton viewPaymentsDeleteButton;
    private javax.swing.JPanel viewPaymentsPanel;
    private javax.swing.JScrollPane viewPaymentsScrollPane;
    private javax.swing.JLabel zip;
    private javax.swing.JTextField zipField;
    // End of variables declaration//GEN-END:variables
}
