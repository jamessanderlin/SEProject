/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

import java.awt.Color;
import java.awt.FlowLayout;
import javax.swing.*;
import java.util.*;
import java.awt.Point;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;

/**
 * UserInterface is the main class for handling user input.
 * 
 * @author Mudrekh Goderya, James Sanderlin
 */
public class UserInterface extends javax.swing.JFrame {

    //The table models for the JTables displayed in the UserInterface
    MapTableModel accountTableModel;
    MeterTableModel meterTableModel;
    
    //Constant ints for easy of identifying arguments;
    public static final int RESIDENTIAL = 0;
    public static final int COMMERCIAL = 1;
    
    /**
     * Creates new form UserInterfacePrototype
     */
    public UserInterface() {
        //Instantiation of the table models
        accountTableModel = new MapTableModel(Controller.getInstance().getAccounts(), "Account ID", "Account Name");
        meterTableModel = new MeterTableModel(Controller.getInstance().getMeters(), "Meter ID");
        
        initComponents();
        
        //Window listener to force saving on exit.
        addWindowListener(new WindowAdapter() {
            public void windowClosing(WindowEvent e) {
                    Controller.getInstance().save();
                    System.exit(0);
                }
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        accountPopup = new javax.swing.JPopupMenu();
        deleteAccountPopup = new javax.swing.JMenuItem();
        jSeparator2 = new javax.swing.JPopupMenu.Separator();
        addMeterToAccount = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        meterScrollPane = new javax.swing.JScrollPane();
        meterTable = new javax.swing.JTable();
        accountButtonGroup = new javax.swing.ButtonGroup();
        addMeterPanel = new javax.swing.JPanel();
        meterIDLabel = new javax.swing.JLabel();
        meterTypeLabel = new javax.swing.JLabel();
        meterRateLabel = new javax.swing.JLabel();
        meterAddLine1Label = new javax.swing.JLabel();
        meterAddLine2Label = new javax.swing.JLabel();
        meterCityLabel = new javax.swing.JLabel();
        meterStateLabel = new javax.swing.JLabel();
        meterZipLabel = new javax.swing.JLabel();
        meterIDField = new javax.swing.JTextField();
        meterRateField = new javax.swing.JTextField();
        meterAddLine1Field = new javax.swing.JTextField();
        meterAddLine2Field = new javax.swing.JTextField();
        meterCityField = new javax.swing.JTextField();
        meterStateField = new javax.swing.JTextField();
        meterZipField = new javax.swing.JTextField();
        meterTypeComboBox = new javax.swing.JComboBox();
        optionalLabel = new javax.swing.JLabel();
        meterNote1 = new javax.swing.JLabel();
        meterNote2 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        mainSplitPane = new javax.swing.JSplitPane();
        rightSplitPane = new javax.swing.JSplitPane();
        meterViewSrollPane = new javax.swing.JScrollPane();
        meterViewTable = new javax.swing.JTable();
        accountPanel = new javax.swing.JPanel();
        accountInfoPanel = new javax.swing.JPanel();
        firstName = new javax.swing.JLabel();
        lastName = new javax.swing.JLabel();
        accountID = new javax.swing.JLabel();
        addressLine1 = new javax.swing.JLabel();
        addressLine2 = new javax.swing.JLabel();
        city = new javax.swing.JLabel();
        state = new javax.swing.JLabel();
        zip = new javax.swing.JLabel();
        firstNameField = new javax.swing.JTextField();
        lastNameField = new javax.swing.JTextField();
        accountIDField = new javax.swing.JTextField();
        addLine1Field = new javax.swing.JTextField();
        addLine2Field = new javax.swing.JTextField();
        cityField = new javax.swing.JTextField();
        stateField = new javax.swing.JTextField();
        zipField = new javax.swing.JTextField();
        compName = new javax.swing.JLabel();
        compNameField = new javax.swing.JTextField();
        buttonPanel = new javax.swing.JPanel();
        accSave = new javax.swing.JButton();
        accCancel = new javax.swing.JButton();
        accCreate = new javax.swing.JButton();
        resAccButton = new javax.swing.JRadioButton();
        comAccButton = new javax.swing.JRadioButton();
        jLabel1 = new javax.swing.JLabel();
        accountScrollPane = new javax.swing.JScrollPane();
        accountTable = new javax.swing.JTable();
        menuBar = new javax.swing.JMenuBar();
        menuFile = new javax.swing.JMenu();
        save = new javax.swing.JMenuItem();
        menuEdit = new javax.swing.JMenu();
        addResidentialAccount = new javax.swing.JMenuItem();
        addCommercialAccount = new javax.swing.JMenuItem();
        deleteAccount = new javax.swing.JMenuItem();

        deleteAccountPopup.setText("Delete Account");
        deleteAccountPopup.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteAccountPopupActionPerformed(evt);
            }
        });
        accountPopup.add(deleteAccountPopup);
        accountPopup.add(jSeparator2);

        addMeterToAccount.setText("Add Meter To Account");
        addMeterToAccount.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addMeterToAccountActionPerformed(evt);
            }
        });
        accountPopup.add(addMeterToAccount);

        meterTable.setModel(meterTableModel);
        meterTable.setDefaultRenderer(Integer.class, new LeftCellRenderer());
        meterScrollPane.setViewportView(meterTable);

        meterIDLabel.setText("Meter ID");

        meterTypeLabel.setText("Type");

        meterRateLabel.setText("Rate");

        meterAddLine1Label.setText("Address Line 1*");

        meterAddLine2Label.setText("Address Line 2*");

        meterCityLabel.setText("City*");

        meterStateLabel.setText("State*");

        meterZipLabel.setText("Zip*");

        meterTypeComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Digital", "Analog" }));

        optionalLabel.setText("* Indicates an optional field");

        meterNote1.setText("ID must be between 1 and 2147483647 ");

        meterNote2.setText("Rate must be greater than or equal to 0.0");

        jLabel2.setText("kWh");

        javax.swing.GroupLayout addMeterPanelLayout = new javax.swing.GroupLayout(addMeterPanel);
        addMeterPanel.setLayout(addMeterPanelLayout);
        addMeterPanelLayout.setHorizontalGroup(
            addMeterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(addMeterPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(addMeterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(addMeterPanelLayout.createSequentialGroup()
                        .addGroup(addMeterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(meterZipLabel, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(meterStateLabel, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(meterCityLabel, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(meterAddLine2Label, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(meterAddLine1Label, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(meterRateLabel, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(meterTypeLabel, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(meterIDLabel, javax.swing.GroupLayout.Alignment.TRAILING))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(addMeterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(addMeterPanelLayout.createSequentialGroup()
                                .addGroup(addMeterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(meterRateField, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(meterTypeComboBox, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel2))
                            .addGroup(addMeterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(meterCityField, javax.swing.GroupLayout.DEFAULT_SIZE, 142, Short.MAX_VALUE)
                                .addComponent(meterIDField, javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(meterAddLine2Field)
                                .addComponent(meterAddLine1Field))
                            .addGroup(addMeterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(meterZipField, javax.swing.GroupLayout.DEFAULT_SIZE, 66, Short.MAX_VALUE)
                                .addComponent(meterStateField))))
                    .addComponent(meterNote1)
                    .addComponent(optionalLabel)
                    .addComponent(meterNote2))
                .addContainerGap(37, Short.MAX_VALUE))
        );
        addMeterPanelLayout.setVerticalGroup(
            addMeterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(addMeterPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(addMeterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(meterIDLabel)
                    .addComponent(meterIDField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(addMeterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(meterTypeLabel)
                    .addComponent(meterTypeComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(addMeterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(meterRateLabel)
                    .addGroup(addMeterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(meterRateField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel2)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(addMeterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(meterAddLine1Label)
                    .addComponent(meterAddLine1Field, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(addMeterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(meterAddLine2Label)
                    .addComponent(meterAddLine2Field, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(addMeterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(meterCityLabel)
                    .addComponent(meterCityField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(addMeterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(meterStateLabel)
                    .addComponent(meterStateField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(addMeterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(meterZipLabel)
                    .addComponent(meterZipField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(optionalLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(meterNote1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(meterNote2)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Utility Billing Program");

        mainSplitPane.setDividerLocation(500);

        rightSplitPane.setDividerLocation(500);
        rightSplitPane.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);

        meterViewSrollPane.setBorder(javax.swing.BorderFactory.createTitledBorder("Meter Display"));

        meterViewTable.setAutoCreateRowSorter(true);
        meterViewTable.setModel(new MeterViewTableModel());
        meterViewTable.setDefaultRenderer(Object.class, new LeftCellRenderer());
        meterViewSrollPane.setViewportView(meterViewTable);

        rightSplitPane.setRightComponent(meterViewSrollPane);

        accountPanel.setName(""); // NOI18N

        accountInfoPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Account Information"));
        accountInfoPanel.setName("Residential Account Information"); // NOI18N

        firstName.setText("First Name");

        lastName.setText("Last Name");

        accountID.setText("Account ID");

        addressLine1.setText("Address Line 1");

        addressLine2.setText("Address Line 2");

        city.setText("City");

        state.setText("State");

        zip.setText("Zip");

        compName.setText("Company Name");

        compNameField.setEnabled(false);

        accSave.setText("Save/Edit");
        accSave.setEnabled(false);

        accCancel.setText("Cancel");
        accCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                accCancelActionPerformed(evt);
            }
        });

        accCreate.setText("Create");
        accCreate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                accCreateActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout buttonPanelLayout = new javax.swing.GroupLayout(buttonPanel);
        buttonPanel.setLayout(buttonPanelLayout);
        buttonPanelLayout.setHorizontalGroup(
            buttonPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(buttonPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(accSave, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(accCreate, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(accCancel, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        buttonPanelLayout.setVerticalGroup(
            buttonPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, buttonPanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(buttonPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(accSave)
                    .addComponent(accCancel)
                    .addComponent(accCreate))
                .addContainerGap())
        );

        accountButtonGroup.add(resAccButton);
        resAccButton.setSelected(true);
        resAccButton.setText("Residential Account");
        resAccButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resAccButtonActionPerformed(evt);
            }
        });

        accountButtonGroup.add(comAccButton);
        comAccButton.setText("Commercial Account");
        comAccButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comAccButtonActionPerformed(evt);
            }
        });

        jLabel1.setText("(1 - 2147483647)");

        javax.swing.GroupLayout accountInfoPanelLayout = new javax.swing.GroupLayout(accountInfoPanel);
        accountInfoPanel.setLayout(accountInfoPanelLayout);
        accountInfoPanelLayout.setHorizontalGroup(
            accountInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(accountInfoPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(accountInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(accountInfoPanelLayout.createSequentialGroup()
                        .addGroup(accountInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(firstName, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(accountID, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(addressLine1, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(addressLine2, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(city, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(state, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(zip, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(accountInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(lastName, javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(compName, javax.swing.GroupLayout.Alignment.TRAILING)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(accountInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(comAccButton)
                            .addGroup(accountInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(firstNameField)
                                .addComponent(lastNameField)
                                .addGroup(accountInfoPanelLayout.createSequentialGroup()
                                    .addComponent(accountIDField, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(jLabel1))
                                .addComponent(addLine1Field)
                                .addComponent(addLine2Field)
                                .addComponent(cityField, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(zipField)
                                .addComponent(stateField)
                                .addComponent(compNameField)
                                .addComponent(resAccButton)))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, accountInfoPanelLayout.createSequentialGroup()
                        .addComponent(buttonPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addContainerGap())))
        );
        accountInfoPanelLayout.setVerticalGroup(
            accountInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(accountInfoPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(accountInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(firstName)
                    .addComponent(firstNameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(accountInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lastName)
                    .addComponent(lastNameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(accountInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(compName)
                    .addComponent(compNameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(accountInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(accountID)
                    .addComponent(accountIDField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(accountInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(addressLine1)
                    .addComponent(addLine1Field, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(accountInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(addressLine2)
                    .addComponent(addLine2Field, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(accountInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(city)
                    .addComponent(cityField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(accountInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(state)
                    .addComponent(stateField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(accountInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(zip)
                    .addComponent(zipField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(resAccButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(comAccButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 11, Short.MAX_VALUE)
                .addComponent(buttonPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(32, 32, 32))
        );

        javax.swing.GroupLayout accountPanelLayout = new javax.swing.GroupLayout(accountPanel);
        accountPanel.setLayout(accountPanelLayout);
        accountPanelLayout.setHorizontalGroup(
            accountPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(accountPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(accountInfoPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 335, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(22, Short.MAX_VALUE))
        );
        accountPanelLayout.setVerticalGroup(
            accountPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(accountPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(accountInfoPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(41, Short.MAX_VALUE))
        );

        rightSplitPane.setLeftComponent(accountPanel);

        mainSplitPane.setRightComponent(rightSplitPane);

        accountScrollPane.setBorder(javax.swing.BorderFactory.createTitledBorder("Account Display"));
        accountScrollPane.setMinimumSize(new java.awt.Dimension(200, 200));

        accountTable.setAutoCreateRowSorter(true);
        accountTable.setModel(accountTableModel);
        accountTable.setDefaultRenderer(Object.class, new LeftCellRenderer());
        accountTable.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        accountTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                accountTableMouseReleased(evt);
            }
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                accountTableMouseClicked(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                accountTableMousePressed(evt);
            }
        });
        accountScrollPane.setViewportView(accountTable);

        mainSplitPane.setLeftComponent(accountScrollPane);

        menuFile.setText("File");

        save.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        save.setText("Save");
        save.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveActionPerformed(evt);
            }
        });
        menuFile.add(save);

        menuBar.add(menuFile);

        menuEdit.setText("Edit");

        addResidentialAccount.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_R, java.awt.event.InputEvent.CTRL_MASK));
        addResidentialAccount.setText("Add Residential Account");
        addResidentialAccount.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addResidentialAccountActionPerformed(evt);
            }
        });
        menuEdit.add(addResidentialAccount);

        addCommercialAccount.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_C, java.awt.event.InputEvent.CTRL_MASK));
        addCommercialAccount.setText("Add Commercial Account");
        addCommercialAccount.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addCommercialAccountActionPerformed(evt);
            }
        });
        menuEdit.add(addCommercialAccount);

        deleteAccount.setText("Delete Account");
        deleteAccount.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteAccountActionPerformed(evt);
            }
        });
        menuEdit.add(deleteAccount);

        menuBar.add(menuEdit);

        setJMenuBar(menuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(mainSplitPane, javax.swing.GroupLayout.DEFAULT_SIZE, 877, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(mainSplitPane, javax.swing.GroupLayout.DEFAULT_SIZE, 708, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Action to handle adding a new Residential Account to the program.
     * 
     * @param evt The event passed to this action.
     */
    private void addResidentialAccountActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addResidentialAccountActionPerformed
        Account temp = promptForAccount(RESIDENTIAL);
    	if(temp != null)
    	{
    		Controller.getInstance().addAccount(temp);
                //Call to tell the table to update
    		accountTableModel.fireTableDataChanged();
    	}
    }//GEN-LAST:event_addResidentialAccountActionPerformed

    /**
     * Action to handle force saving the status of the program
     * 
     * @param evt The event passed to this action.
     */
    private void saveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveActionPerformed
        Controller.getInstance().save();
    }//GEN-LAST:event_saveActionPerformed

    /**
     * Action to handle deleting an account from the edit menu
     * 
     * @param evt The event passed to this action.
     */
    private void deleteAccountActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteAccountActionPerformed
        JTextField accountID = new JTextField(12);
        Object[] options = {"DELETE", "CANCEL"};

          JPanel myPanel = new JPanel();
          myPanel.add(new JLabel("Enter Account ID to Delete:"));
          myPanel.add(accountID);

          int result = JOptionPane.showOptionDialog(null, myPanel, 
                   "Delete an account", JOptionPane.DEFAULT_OPTION, JOptionPane.INFORMATION_MESSAGE, null, options, options[0]);
          if (result == 0) 
          {
             int ID = Integer.parseInt(accountID.getText()); 
             confirmAccountDelete(ID);
          }
    }//GEN-LAST:event_deleteAccountActionPerformed

    
    private boolean confirmAccountDelete(int accountID)
    {
        Object[] options = {"YES", "NO"};
        JPanel myPanel = new JPanel();
        myPanel.add(new JLabel("Delete Account with the ID:" +  accountID + "?"));
        
        int result = JOptionPane.showOptionDialog(null, myPanel, 
                   "Confirm Deletion", JOptionPane.DEFAULT_OPTION, JOptionPane.INFORMATION_MESSAGE, null, options, options[0]);
        
        if(result != 0)
            return false;
        
        Controller.getInstance().deleteAccount(accountID);
        //Call to tell the table to update
        accountTableModel.fireTableDataChanged();
        System.out.println("ACCOUNT DELETED");
        return true;
    }
    
    /**
     * Action to handle adding a commercial account from the edit menu.
     * 
     * @param evt The event passed to this action.
     */
    private void addCommercialAccountActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addCommercialAccountActionPerformed
        Account temp = promptForAccount(COMMERCIAL);
    	if(temp != null)
    	{
    		Controller.getInstance().addAccount(temp);
                //Call to tell the table to update
    		accountTableModel.fireTableDataChanged();
    	}

    }//GEN-LAST:event_addCommercialAccountActionPerformed

    /**
     * Event to detect popup
     * 
     * @param evt The event passed to this action.
     */
    private void accountTableMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_accountTableMousePressed
        doAccountPopup(evt);
        
    }//GEN-LAST:event_accountTableMousePressed

    /**
     * Event to detect popup
     * 
     * @param evt The event passed to this action.
     */
    private void accountTableMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_accountTableMouseReleased
        doAccountPopup(evt);
    }//GEN-LAST:event_accountTableMouseReleased

    /**
     * Actual method to respond to a call for a popup even. Checks if the event is the
     * popup trigger and then responds accordingly.
     * 
     * @param evt The event passed to this action.
     */
    private void doAccountPopup(java.awt.event.MouseEvent evt)
    {
        if(evt.isPopupTrigger())
        {
            Point p = evt.getPoint();
            int row = accountTable.rowAtPoint(p);
            accountTable.getSelectionModel().setSelectionInterval(row, row);
            Account temp = Controller.getInstance().getAccount(getSelectedAccountID());
            showInAccountPanel(temp);
            accountPopup.show(evt.getComponent(), evt.getX(), evt.getY());
        }
    }
    
    /**
     * Returns the currently selected row in the account table. Returns -1 if
     * for some reason the accountTable does not return an Integer
     * 
     * @return 
     */
    private int getSelectedAccountID()
    {
        int row = accountTable.getSelectedRow();
        Object temp = accountTable.getValueAt(row, 0);
        if(!(temp instanceof Integer))
            return -1;
        int accID = ((Integer)temp).intValue();
        return accID;
    }
    
    /**
     * Action called when the user wants to delete an account from the popup menu
     * 
     * @param evt The event passed to this action.
     */
    private void deleteAccountPopupActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteAccountPopupActionPerformed
        int accID = getSelectedAccountID();
        if(confirmAccountDelete(accID))
            resetAccountInfoPanel();
    }//GEN-LAST:event_deleteAccountPopupActionPerformed

    private void addMeterToAccountActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addMeterToAccountActionPerformed
       
        String options[] = {"OK",  "CANCEL"};
        int result = JOptionPane.showOptionDialog(null, addMeterPanel, 
                         "Add Meter to Account", JOptionPane.DEFAULT_OPTION, JOptionPane.PLAIN_MESSAGE, null, options, options[0]);

        if(result == 0)
        {
            Meter m = getMeterFromMeterPanel();
            if(m != null)
            {
                Account temp = Controller.getInstance().getAccount(getSelectedAccountID());
                temp.addMeter(m);
                System.out.println(m.getMeterID());
                showMetersInMeterTable(temp);
            }
            
        }
        // TODO add your handling code here:
    }//GEN-LAST:event_addMeterToAccountActionPerformed

    private void accountTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_accountTableMouseClicked
        int accID = getSelectedAccountID();
        Account temp = Controller.getInstance().getAccount(accID);
        showInAccountPanel(temp);     
        // TODO add your handling code here:
    }//GEN-LAST:event_accountTableMouseClicked

    private void resAccButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resAccButtonActionPerformed
            firstNameField.setText(compNameField.getText());
            lastNameField.setText("");
            compNameField.setText("");
            enableNameFields(RESIDENTIAL);
    }//GEN-LAST:event_resAccButtonActionPerformed

    private void comAccButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comAccButtonActionPerformed
            compNameField.setText(firstNameField.getText() + " " + lastNameField.getText());
            lastNameField.setText("");
            firstNameField.setText("");
            enableNameFields(COMMERCIAL);

    }//GEN-LAST:event_comAccButtonActionPerformed

    private void accCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_accCancelActionPerformed
            resetAccountInfoPanel();
            accountTable.clearSelection();
    }//GEN-LAST:event_accCancelActionPerformed

    private void accCreateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_accCreateActionPerformed
        
        int accountID = -1;
        try
        {
            accountID = Integer.parseInt(accountIDField.getText());
        }
        catch(Exception e)
        {

        }
        
        if(accountID < 1 || Controller.getInstance().hasAccountID(accountID))
        {
            accountIDField.setBackground(new Color(255, 200, 200));
            return;
        }

        Account temp;
        String fName = firstNameField.getText();
        String lName = lastNameField.getText();
        String cName = compNameField.getText();
        Address addr = new Address(addLine1Field.getText(), 
                                    addLine2Field.getText(), 
                                    cityField.getText(), 
                                    stateField.getText(), 
                                    zipField.getText());
        
        
        if(accountButtonGroup.isSelected(resAccButton.getModel()))
        {
            temp = new ResidentialAccount(fName, lName, accountID, 0, false, new Date(), addr);
        }
        else if(accountButtonGroup.isSelected(comAccButton.getModel()))
        {
            temp = new CommercialAccount(cName, accountID, 0, false, new Date(), addr);
        }
        else
            temp = null;
        
        if(temp != null)
        {
            Controller.getInstance().addAccount(temp);
        }
        clearTextInAccountPanel();
        clearFieldColorsInAccountPanel();
        accountTableModel.fireTableDataChanged();
        
    }//GEN-LAST:event_accCreateActionPerformed

    private Meter getMeterFromMeterPanel()
    {
        
        int meterID = -1;
        double meterRate = -1;
        try
        {
            meterID = Integer.parseInt(meterIDField.getText());
            meterRate = Double.parseDouble(meterRateField.getText());
        }
        catch(Exception e){}
        if(meterID < 1 || meterRate < 0)
            return null;
        
        Address addr = new Address(meterAddLine1Field.getText(), meterAddLine2Field.getText(),
                                        meterCityField.getText(), meterStateField.getText(),
                                        meterZipField.getText());
        
        clearMeterPanel();
        
        return new Meter(meterID, meterTypeComboBox.getSelectedItem().toString(), 
                            meterRate, addr);
    }
    
    private void clearMeterPanel()
    {
        meterIDField.setText("");
        meterRateField.setText("");
        meterAddLine1Field.setText("");
        meterAddLine2Field.setText("");
        meterCityField.setText("");
        meterStateField.setText("");
        meterZipField.setText("");
    }
    
    private void clearTextInAccountPanel()
    {
        compNameField.setText("");
        lastNameField.setText("");
        firstNameField.setText("");

        accountIDField.setText("");
        addLine1Field.setText("");
        addLine2Field.setText("");
        cityField.setText("");
        stateField.setText("");
        zipField.setText("");
    }
    
    private void clearFieldColorsInAccountPanel()
    {
        compNameField.setBackground(Color.WHITE);
        lastNameField.setBackground(Color.WHITE);
        firstNameField.setBackground(Color.WHITE);

        accountIDField.setBackground(Color.WHITE);
        addLine1Field.setBackground(Color.WHITE);
        addLine2Field.setBackground(Color.WHITE);
        cityField.setBackground(Color.WHITE);
        stateField.setBackground(Color.WHITE);
        zipField.setBackground(Color.WHITE);
    }
    
    private void resetAccountInfoPanel()
    {
        clearTextInAccountPanel();
        clearFieldColorsInAccountPanel();
        
        showMetersInMeterTable(null);
        enableComResButtons(true);
        accCreate.setEnabled(true);
        accSave.setEnabled(false);
    }
            
    
    /**
     * Enable and disable the name fields based on the account type presented. 
     * Note, only one option should ever be open.
     * 
     * @param type The type of account passed to it. See int delcarations.
     */
    private void enableNameFields(int type)
    {
        if(type == RESIDENTIAL)
        {
            firstNameField.setEnabled(true);
            lastNameField.setEnabled(true);
            compNameField.setEnabled(false);
        }
        else if(type == COMMERCIAL)
        {
            firstNameField.setEnabled(false);
            lastNameField.setEnabled(false);
            compNameField.setEnabled(true);
        }
            
    }
    
    private void showInAccountPanel(Account temp)
    {
        clearTextInAccountPanel();
        clearFieldColorsInAccountPanel();
        
        Address addr = temp.getBillingAddress();
        
        if(temp instanceof ResidentialAccount)
        {
            ResidentialAccount resAcc = (ResidentialAccount)temp;
            firstNameField.setText(resAcc.getClientFirstName());
            lastNameField.setText(resAcc.getClientLastName());
            compNameField.setText("");
            accountButtonGroup.setSelected(resAccButton.getModel(), true);
            enableNameFields(RESIDENTIAL);
        }
        else if(temp instanceof CommercialAccount)
        {
            CommercialAccount comAcc = (CommercialAccount)temp;
            compNameField.setText(comAcc.getCompanyName());
            lastNameField.setText("");
            firstNameField.setText("");
            accountButtonGroup.setSelected(comAccButton.getModel(), true);
            enableNameFields(COMMERCIAL);

        }
        
        accountIDField.setText("" + temp.getAccountID());
        addLine1Field.setText(addr.getLocation1());
        addLine2Field.setText(addr.getLocation2());
        cityField.setText(addr.getCity());
        stateField.setText(addr.getState());
        zipField.setText(addr.getZip());
        
        showMetersInMeterTable(temp);
        enableComResButtons(false);
        accCreate.setEnabled(false);
        accSave.setEnabled(true);
    }
    
    private void enableComResButtons(boolean enable)
    {
        resAccButton.setEnabled(enable);
        comAccButton.setEnabled(enable);
    }
    
    private void showMetersInMeterTable(Account acc)
    {
        if(acc instanceof CommercialAccount)
        {
            meterViewTable.setModel(new MeterViewTableModel(((CommercialAccount)acc).getMeters()));
        }
        else if(acc instanceof ResidentialAccount)
        {
            meterViewTable.setModel(new MeterViewTableModel(((ResidentialAccount)acc).getMeter()));
        }
        else
        {
            meterViewTable.setModel(new MeterViewTableModel());
  
        }
//        meterViewDialog.pack();
//        meterViewDialog.setLocationRelativeTo(this);
//        meterViewDialog.setVisible(true);
    }
    /**
     * Helper method to display the account information. This creates the popup
     * that displays the information. 
     * 
     * @param acc 
     */
    private void displayViewAccountDialog(Account acc)
    {
        Address address = acc.getBillingAddress();
        
        //Display the name panel for the different accounts slightly differently
        JPanel namePanel = new JPanel(new FlowLayout(FlowLayout.LEFT));
        if(acc instanceof CommercialAccount)
        {
            CommercialAccount comAcc = (CommercialAccount)acc;
            namePanel.add(new JLabel("Company Name:"));
            namePanel.add(new JLabel(comAcc.getCompanyName()));
        }
        else
        {
            ResidentialAccount resAcc = (ResidentialAccount)acc;
            namePanel.add(new JLabel("First Name:"));
            namePanel.add(new JLabel(resAcc.getClientFirstName()));
            namePanel.add(Box.createHorizontalStrut(15));
            namePanel.add(new JLabel("Last Name:"));
            namePanel.add(new JLabel(resAcc.getClientLastName()));
        }  
        
        //Construct the rest of the panel. 
        Object[] options = {"OK"};

		JPanel myPanel = new JPanel();
		myPanel.setLayout(new BoxLayout(myPanel, BoxLayout.Y_AXIS));

		myPanel.add(namePanel);
		JPanel accountIdPanel = new JPanel(new FlowLayout(FlowLayout.LEFT));
		accountIdPanel.add(new JLabel("Account ID:"));
		accountIdPanel.add(new JLabel("" + acc.getAccountID()));
		accountIdPanel.add(Box.createHorizontalStrut(230));
		myPanel.add(accountIdPanel);
		JPanel addressPanel = new JPanel(new FlowLayout(FlowLayout.LEFT));
                JPanel addressPanel2 = new JPanel(new FlowLayout(FlowLayout.LEFT));
		addressPanel.add(new JLabel("Address Line 1:"));
		addressPanel.add(new JLabel(address.getLocation1()));
		addressPanel.add(Box.createHorizontalStrut(15));
		addressPanel2.add(new JLabel("Address Line 2:"));
		addressPanel2.add(new JLabel(address.getLocation2()));
		myPanel.add(addressPanel);
                myPanel.add(addressPanel2);
		JPanel cszPanel = new JPanel(new FlowLayout(FlowLayout.LEFT));
		cszPanel.add(new JLabel("City:"));
		cszPanel.add(new JLabel(address.getCity()));
		cszPanel.add(Box.createHorizontalStrut(15));
		cszPanel.add(new JLabel("State:"));
		cszPanel.add(new JLabel(address.getState()));
		cszPanel.add(Box.createHorizontalStrut(15));
		cszPanel.add(new JLabel("Zip:"));
		cszPanel.add(new JLabel(address.getZip()));
		myPanel.add(cszPanel);
                JOptionPane.showOptionDialog(null, myPanel, 
                         "View Account Information", JOptionPane.DEFAULT_OPTION, JOptionPane.INFORMATION_MESSAGE, null, options, options[0]);
    }
    
    /**
     * Convinience method for promptForAccount. Calls the normal method with a null
     * account parameter. Note this will create a popup that has empty fields.
     * 
     * @param type The type of the account
     * @return The new/edited account.
     */
    private Account promptForAccount(int type)
    {
        return promptForAccount(null, type);
    }
    
    /**
     * Method to create or edit an account. If the method is passed an account,
     * it will use the account information to populate the fields in the dialog.
     * 
     * @param acc The account with which to populate the fields.
     * @param type The type of the Account. 
     * @return 
     */
    private Account promptForAccount(Account acc, int type)
    {   
        //Fields for the name panel.
        JTextField firstNameField = new JTextField(10);
        JTextField lastNameField = new JTextField(10);           
        JTextField companyName = new JTextField(30);
          
        //Fields for the rest of the panels.
        JTextField accountIDField = new JTextField(10);
        JTextField line1Field = new JTextField(20);
        JTextField line2Field = new JTextField(20);
        JTextField cityField = new JTextField(10);
        JTextField stateField = new JTextField(10);
        JTextField zipField = new JTextField(5);
            
        //Populate the fields with the current account if it is not null    
        if(acc != null)
        {
            Address address = acc.getBillingAddress();
            if(type == RESIDENTIAL && acc instanceof ResidentialAccount)
            {
                ResidentialAccount resAcc = (ResidentialAccount)acc;
                firstNameField.setText(resAcc.getClientFirstName());
                lastNameField.setText(resAcc.getClientLastName());
            }
            else if(type == COMMERCIAL && acc instanceof CommercialAccount)
            {
                CommercialAccount comAcc = (CommercialAccount)acc;
                companyName.setText(comAcc.getCompanyName());
            }
            else
            {
                return null;
            }
            
            accountIDField.setText(Integer.toString(acc.getAccountID()));
            line1Field.setText(address.getLocation1());
            line2Field.setText(address.getLocation2());
            cityField.setText(address.getCity());
            stateField.setText(address.getState());
            zipField.setText(address.getZip());
        }
        
        //Handle the name panel depending on the type of account. 
        JPanel namePanel = new JPanel(new FlowLayout(FlowLayout.LEFT));
        if(type == COMMERCIAL)
        {
            namePanel.add(new JLabel("Company Name:"));
            namePanel.add(companyName);
        }
        else if(type == RESIDENTIAL)
        {
            namePanel.add(new JLabel("First Name:"));
            namePanel.add(firstNameField);
            namePanel.add(Box.createHorizontalStrut(15));
            namePanel.add(new JLabel("Last Name:"));
            namePanel.add(lastNameField);
        }
        //Return null for a unhandled account. 
        else
        {
            return null;
        }
        
        //Create the other standard fields for the dialog
        JPanel myPanel = new JPanel();
        myPanel.setLayout(new BoxLayout(myPanel, BoxLayout.Y_AXIS));
        myPanel.add(namePanel);
        JPanel accountIdPanel = new JPanel(new FlowLayout(FlowLayout.LEFT));
        accountIdPanel.add(new JLabel("Account ID:"));
        accountIdPanel.add(accountIDField);
        accountIdPanel.add(Box.createHorizontalStrut(230));
        myPanel.add(accountIdPanel);
        JPanel addressPanel = new JPanel(new FlowLayout(FlowLayout.LEFT));
        JPanel addressPanel2 = new JPanel(new FlowLayout(FlowLayout.LEFT));
        addressPanel.add(new JLabel("Address Line 1:"));
        addressPanel.add(line1Field);
        addressPanel2.add(new JLabel("Address Line 2:"));
        addressPanel2.add(line2Field);
        myPanel.add(addressPanel);
        myPanel.add(addressPanel2);
        JPanel cszPanel = new JPanel(new FlowLayout(FlowLayout.LEFT));
        cszPanel.add(new JLabel("City:"));
        cszPanel.add(cityField);
        cszPanel.add(Box.createHorizontalStrut(15));
        cszPanel.add(new JLabel("State"));
        cszPanel.add(stateField);
        cszPanel.add(Box.createHorizontalStrut(15));
        cszPanel.add(new JLabel("Zip"));
        cszPanel.add(zipField);
        myPanel.add(cszPanel);
        
        //Display the dialog.
        Object[] options = {"SAVE", "CANCEL"};
        int result = JOptionPane.showOptionDialog(null, myPanel, "Enter information for the account", 
                                                    JOptionPane.DEFAULT_OPTION, JOptionPane.INFORMATION_MESSAGE, 
                                                    null, options, options[0]);
        
        //If the user clicks ok, create the new account based on the parameters
        if (result == 0) 
        {
            try
            {  
                Account temp;
                if(type == RESIDENTIAL)
                {
                    temp = new ResidentialAccount(firstNameField.getText(), lastNameField.getText(),	
                                                        Integer.parseInt(accountIDField.getText()), 0, false,
                                                        new Date(), new Address(line1Field.getText(), 
                                                        line2Field.getText(), cityField.getText(), 
                                                        stateField.getText(), zipField.getText()));
                }
                else if(type == COMMERCIAL)
                {
                    temp = new CommercialAccount(companyName.getText(), 
                                                        Integer.parseInt(accountIDField.getText()), 0, false, 
                                                        new Date(), new Address(line1Field.getText(), 
                                                        line2Field.getText(), cityField.getText(), 
                                                        stateField.getText(), zipField.getText()));
                }
                else
                {
                    temp = null;
                }
                return temp;
            }
            catch(Exception e)
            {
                return null;
            }
        }
        else
        {
            return null;
        }
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(UserInterface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(UserInterface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(UserInterface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(UserInterface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new UserInterface().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton accCancel;
    private javax.swing.JButton accCreate;
    private javax.swing.JButton accSave;
    private javax.swing.ButtonGroup accountButtonGroup;
    private javax.swing.JLabel accountID;
    private javax.swing.JTextField accountIDField;
    private javax.swing.JPanel accountInfoPanel;
    private javax.swing.JPanel accountPanel;
    private javax.swing.JPopupMenu accountPopup;
    private javax.swing.JScrollPane accountScrollPane;
    private javax.swing.JTable accountTable;
    private javax.swing.JMenuItem addCommercialAccount;
    private javax.swing.JTextField addLine1Field;
    private javax.swing.JTextField addLine2Field;
    private javax.swing.JPanel addMeterPanel;
    private javax.swing.JMenuItem addMeterToAccount;
    private javax.swing.JMenuItem addResidentialAccount;
    private javax.swing.JLabel addressLine1;
    private javax.swing.JLabel addressLine2;
    private javax.swing.JPanel buttonPanel;
    private javax.swing.JLabel city;
    private javax.swing.JTextField cityField;
    private javax.swing.JRadioButton comAccButton;
    private javax.swing.JLabel compName;
    private javax.swing.JTextField compNameField;
    private javax.swing.JMenuItem deleteAccount;
    private javax.swing.JMenuItem deleteAccountPopup;
    private javax.swing.JLabel firstName;
    private javax.swing.JTextField firstNameField;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JPopupMenu.Separator jSeparator2;
    private javax.swing.JLabel lastName;
    private javax.swing.JTextField lastNameField;
    private javax.swing.JSplitPane mainSplitPane;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JMenu menuEdit;
    private javax.swing.JMenu menuFile;
    private javax.swing.JTextField meterAddLine1Field;
    private javax.swing.JLabel meterAddLine1Label;
    private javax.swing.JTextField meterAddLine2Field;
    private javax.swing.JLabel meterAddLine2Label;
    private javax.swing.JTextField meterCityField;
    private javax.swing.JLabel meterCityLabel;
    private javax.swing.JTextField meterIDField;
    private javax.swing.JLabel meterIDLabel;
    private javax.swing.JLabel meterNote1;
    private javax.swing.JLabel meterNote2;
    private javax.swing.JTextField meterRateField;
    private javax.swing.JLabel meterRateLabel;
    private javax.swing.JScrollPane meterScrollPane;
    private javax.swing.JTextField meterStateField;
    private javax.swing.JLabel meterStateLabel;
    private javax.swing.JTable meterTable;
    private javax.swing.JComboBox meterTypeComboBox;
    private javax.swing.JLabel meterTypeLabel;
    private javax.swing.JScrollPane meterViewSrollPane;
    private javax.swing.JTable meterViewTable;
    private javax.swing.JTextField meterZipField;
    private javax.swing.JLabel meterZipLabel;
    private javax.swing.JLabel optionalLabel;
    private javax.swing.JRadioButton resAccButton;
    private javax.swing.JSplitPane rightSplitPane;
    private javax.swing.JMenuItem save;
    private javax.swing.JLabel state;
    private javax.swing.JTextField stateField;
    private javax.swing.JLabel zip;
    private javax.swing.JTextField zipField;
    // End of variables declaration//GEN-END:variables
}
